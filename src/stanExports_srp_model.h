// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_srp_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_srp_model");
    reader.add_event(131, 129, "end", "model_srp_model");
    return reader;
}
#include <stan_meta_header.hpp>
class model_srp_model
  : public stan::model::model_base_crtp<model_srp_model> {
private:
        int M_groups;
        int N;
        std::vector<int> group_id;
        std::vector<int> from;
        std::vector<int> to;
        std::vector<double> dt_min;
        std::vector<double> dt_max;
        std::vector<double> logodds_mean;
        std::vector<double> logodds_sd;
        std::vector<double> logodds_min;
        std::vector<double> logodds_max;
        std::vector<std::vector<double> > shape_min;
        std::vector<std::vector<double> > shape_max;
        std::vector<std::vector<double> > median_time_to_next_event_mean;
        std::vector<std::vector<double> > median_time_to_next_event_sd;
public:
    model_srp_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_srp_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_srp_model_namespace::model_srp_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "M_groups", "int", context__.to_vec());
            M_groups = int(0);
            vals_i__ = context__.vals_i("M_groups");
            pos__ = 0;
            M_groups = vals_i__[pos__++];
            check_greater_or_equal(function__, "M_groups", M_groups, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 7;
            validate_non_negative_index("group_id", "N", N);
            context__.validate_dims("data initialization", "group_id", "int", context__.to_vec(N));
            group_id = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("group_id");
            pos__ = 0;
            size_t group_id_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < group_id_k_0_max__; ++k_0__) {
                group_id[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < group_id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id[i_0__]", group_id[i_0__], 1);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("from", "N", N);
            context__.validate_dims("data initialization", "from", "int", context__.to_vec(N));
            from = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("from");
            pos__ = 0;
            size_t from_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < from_k_0_max__; ++k_0__) {
                from[k_0__] = vals_i__[pos__++];
            }
            size_t from_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < from_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "from[i_0__]", from[i_0__], 1);
                check_less_or_equal(function__, "from[i_0__]", from[i_0__], 2);
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("to", "N", N);
            context__.validate_dims("data initialization", "to", "int", context__.to_vec(N));
            to = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("to");
            pos__ = 0;
            size_t to_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < to_k_0_max__; ++k_0__) {
                to[k_0__] = vals_i__[pos__++];
            }
            size_t to_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < to_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "to[i_0__]", to[i_0__], 2);
                check_less_or_equal(function__, "to[i_0__]", to[i_0__], 4);
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("dt_min", "N", N);
            context__.validate_dims("data initialization", "dt_min", "double", context__.to_vec(N));
            dt_min = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("dt_min");
            pos__ = 0;
            size_t dt_min_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < dt_min_k_0_max__; ++k_0__) {
                dt_min[k_0__] = vals_r__[pos__++];
            }
            size_t dt_min_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < dt_min_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt_min[i_0__]", dt_min[i_0__], 0);
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("dt_max", "N", N);
            context__.validate_dims("data initialization", "dt_max", "double", context__.to_vec(N));
            dt_max = std::vector<double>(N, double(0));
            vals_r__ = context__.vals_r("dt_max");
            pos__ = 0;
            size_t dt_max_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < dt_max_k_0_max__; ++k_0__) {
                dt_max[k_0__] = vals_r__[pos__++];
            }
            size_t dt_max_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < dt_max_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt_max[i_0__]", dt_max[i_0__], 0);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("logodds_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_mean", "double", context__.to_vec(M_groups));
            logodds_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_mean");
            pos__ = 0;
            size_t logodds_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_mean_k_0_max__; ++k_0__) {
                logodds_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("logodds_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_sd", "double", context__.to_vec(M_groups));
            logodds_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_sd");
            pos__ = 0;
            size_t logodds_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_sd_k_0_max__; ++k_0__) {
                logodds_sd[k_0__] = vals_r__[pos__++];
            }
            size_t logodds_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < logodds_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "logodds_sd[i_0__]", logodds_sd[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("logodds_min", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_min", "double", context__.to_vec(M_groups));
            logodds_min = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_min");
            pos__ = 0;
            size_t logodds_min_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_min_k_0_max__; ++k_0__) {
                logodds_min[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("logodds_max", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_max", "double", context__.to_vec(M_groups));
            logodds_max = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_max");
            pos__ = 0;
            size_t logodds_max_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_max_k_0_max__; ++k_0__) {
                logodds_max[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("shape_min", "M_groups", M_groups);
            validate_non_negative_index("shape_min", "3", 3);
            context__.validate_dims("data initialization", "shape_min", "double", context__.to_vec(M_groups,3));
            shape_min = std::vector<std::vector<double> >(M_groups, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("shape_min");
            pos__ = 0;
            size_t shape_min_k_0_max__ = M_groups;
            size_t shape_min_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < shape_min_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < shape_min_k_0_max__; ++k_0__) {
                    shape_min[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t shape_min_i_0_max__ = M_groups;
            size_t shape_min_i_1_max__ = 3;
            for (size_t i_0__ = 0; i_0__ < shape_min_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < shape_min_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "shape_min[i_0__][i_1__]", shape_min[i_0__][i_1__], stan::math::machine_precision());
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("shape_max", "M_groups", M_groups);
            validate_non_negative_index("shape_max", "3", 3);
            context__.validate_dims("data initialization", "shape_max", "double", context__.to_vec(M_groups,3));
            shape_max = std::vector<std::vector<double> >(M_groups, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("shape_max");
            pos__ = 0;
            size_t shape_max_k_0_max__ = M_groups;
            size_t shape_max_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < shape_max_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < shape_max_k_0_max__; ++k_0__) {
                    shape_max[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t shape_max_i_0_max__ = M_groups;
            size_t shape_max_i_1_max__ = 3;
            for (size_t i_0__ = 0; i_0__ < shape_max_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < shape_max_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "shape_max[i_0__][i_1__]", shape_max[i_0__][i_1__], stan::math::machine_precision());
                }
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("median_time_to_next_event_mean", "M_groups", M_groups);
            validate_non_negative_index("median_time_to_next_event_mean", "3", 3);
            context__.validate_dims("data initialization", "median_time_to_next_event_mean", "double", context__.to_vec(M_groups,3));
            median_time_to_next_event_mean = std::vector<std::vector<double> >(M_groups, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("median_time_to_next_event_mean");
            pos__ = 0;
            size_t median_time_to_next_event_mean_k_0_max__ = M_groups;
            size_t median_time_to_next_event_mean_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < median_time_to_next_event_mean_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < median_time_to_next_event_mean_k_0_max__; ++k_0__) {
                    median_time_to_next_event_mean[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 25;
            validate_non_negative_index("median_time_to_next_event_sd", "M_groups", M_groups);
            validate_non_negative_index("median_time_to_next_event_sd", "3", 3);
            context__.validate_dims("data initialization", "median_time_to_next_event_sd", "double", context__.to_vec(M_groups,3));
            median_time_to_next_event_sd = std::vector<std::vector<double> >(M_groups, std::vector<double>(3, double(0)));
            vals_r__ = context__.vals_r("median_time_to_next_event_sd");
            pos__ = 0;
            size_t median_time_to_next_event_sd_k_0_max__ = M_groups;
            size_t median_time_to_next_event_sd_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < median_time_to_next_event_sd_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < median_time_to_next_event_sd_k_0_max__; ++k_0__) {
                    median_time_to_next_event_sd[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t median_time_to_next_event_sd_i_0_max__ = M_groups;
            size_t median_time_to_next_event_sd_i_1_max__ = 3;
            for (size_t i_0__ = 0; i_0__ < median_time_to_next_event_sd_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < median_time_to_next_event_sd_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "median_time_to_next_event_sd[i_0__][i_1__]", median_time_to_next_event_sd[i_0__][i_1__], stan::math::machine_precision());
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 33;
            validate_non_negative_index("logodds_raw", "M_groups", M_groups);
            num_params_r__ += (1 * M_groups);
            current_statement_begin__ = 34;
            validate_non_negative_index("median_time_to_next_event", "M_groups", M_groups);
            validate_non_negative_index("median_time_to_next_event", "3", 3);
            num_params_r__ += ((1 * M_groups) * 3);
            current_statement_begin__ = 35;
            validate_non_negative_index("shape_raw", "M_groups", M_groups);
            validate_non_negative_index("shape_raw", "3", 3);
            num_params_r__ += ((1 * M_groups) * 3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_srp_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 33;
        if (!(context__.contains_r("logodds_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logodds_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logodds_raw");
        pos__ = 0U;
        validate_non_negative_index("logodds_raw", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "logodds_raw", "double", context__.to_vec(M_groups));
        std::vector<double> logodds_raw(M_groups, double(0));
        size_t logodds_raw_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < logodds_raw_k_0_max__; ++k_0__) {
            logodds_raw[k_0__] = vals_r__[pos__++];
        }
        size_t logodds_raw_i_0_max__ = M_groups;
        for (size_t i_0__ = 0; i_0__ < logodds_raw_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, logodds_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logodds_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 34;
        if (!(context__.contains_r("median_time_to_next_event")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable median_time_to_next_event missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("median_time_to_next_event");
        pos__ = 0U;
        validate_non_negative_index("median_time_to_next_event", "M_groups", M_groups);
        validate_non_negative_index("median_time_to_next_event", "3", 3);
        context__.validate_dims("parameter initialization", "median_time_to_next_event", "double", context__.to_vec(M_groups,3));
        std::vector<std::vector<double> > median_time_to_next_event(M_groups, std::vector<double>(3, double(0)));
        size_t median_time_to_next_event_k_0_max__ = M_groups;
        size_t median_time_to_next_event_k_1_max__ = 3;
        for (size_t k_1__ = 0; k_1__ < median_time_to_next_event_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < median_time_to_next_event_k_0_max__; ++k_0__) {
                median_time_to_next_event[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t median_time_to_next_event_i_0_max__ = M_groups;
        size_t median_time_to_next_event_i_1_max__ = 3;
        for (size_t i_0__ = 0; i_0__ < median_time_to_next_event_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < median_time_to_next_event_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_lb_unconstrain(stan::math::sqrt(stan::math::machine_precision()), median_time_to_next_event[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable median_time_to_next_event: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("shape_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable shape_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("shape_raw");
        pos__ = 0U;
        validate_non_negative_index("shape_raw", "M_groups", M_groups);
        validate_non_negative_index("shape_raw", "3", 3);
        context__.validate_dims("parameter initialization", "shape_raw", "double", context__.to_vec(M_groups,3));
        std::vector<std::vector<double> > shape_raw(M_groups, std::vector<double>(3, double(0)));
        size_t shape_raw_k_0_max__ = M_groups;
        size_t shape_raw_k_1_max__ = 3;
        for (size_t k_1__ = 0; k_1__ < shape_raw_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < shape_raw_k_0_max__; ++k_0__) {
                shape_raw[k_0__][k_1__] = vals_r__[pos__++];
            }
        }
        size_t shape_raw_i_0_max__ = M_groups;
        size_t shape_raw_i_1_max__ = 3;
        for (size_t i_0__ = 0; i_0__ < shape_raw_i_0_max__; ++i_0__) {
            for (size_t i_1__ = 0; i_1__ < shape_raw_i_1_max__; ++i_1__) {
                try {
                    writer__.scalar_lub_unconstrain(0, 1, shape_raw[i_0__][i_1__]);
                } catch (const std::exception& e) {
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable shape_raw: ") + e.what()), current_statement_begin__, prog_reader__());
                }
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 33;
            std::vector<local_scalar_t__> logodds_raw;
            size_t logodds_raw_d_0_max__ = M_groups;
            logodds_raw.reserve(logodds_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < logodds_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    logodds_raw.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    logodds_raw.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 34;
            std::vector<std::vector<local_scalar_t__> > median_time_to_next_event;
            size_t median_time_to_next_event_d_0_max__ = M_groups;
            size_t median_time_to_next_event_d_1_max__ = 3;
            median_time_to_next_event.resize(median_time_to_next_event_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < median_time_to_next_event_d_0_max__; ++d_0__) {
                median_time_to_next_event[d_0__].reserve(median_time_to_next_event_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < median_time_to_next_event_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        median_time_to_next_event[d_0__].push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision()), lp__));
                    else
                        median_time_to_next_event[d_0__].push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision())));
                }
            }
            current_statement_begin__ = 35;
            std::vector<std::vector<local_scalar_t__> > shape_raw;
            size_t shape_raw_d_0_max__ = M_groups;
            size_t shape_raw_d_1_max__ = 3;
            shape_raw.resize(shape_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < shape_raw_d_0_max__; ++d_0__) {
                shape_raw[d_0__].reserve(shape_raw_d_1_max__);
                for (size_t d_1__ = 0; d_1__ < shape_raw_d_1_max__; ++d_1__) {
                    if (jacobian__)
                        shape_raw[d_0__].push_back(in__.scalar_lub_constrain(0, 1, lp__));
                    else
                        shape_raw[d_0__].push_back(in__.scalar_lub_constrain(0, 1));
                }
            }
            // transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("logodds", "M_groups", M_groups);
            std::vector<local_scalar_t__> logodds(M_groups, local_scalar_t__(0));
            stan::math::initialize(logodds, DUMMY_VAR__);
            stan::math::fill(logodds, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("p", "M_groups", M_groups);
            std::vector<local_scalar_t__> p(M_groups, local_scalar_t__(0));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("scale", "M_groups", M_groups);
            validate_non_negative_index("scale", "3", 3);
            std::vector<std::vector<local_scalar_t__> > scale(M_groups, std::vector<local_scalar_t__>(3, local_scalar_t__(0)));
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("shape", "M_groups", M_groups);
            validate_non_negative_index("shape", "3", 3);
            std::vector<std::vector<local_scalar_t__> > shape(M_groups, std::vector<local_scalar_t__>(3, local_scalar_t__(0)));
            stan::math::initialize(shape, DUMMY_VAR__);
            stan::math::fill(shape, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 48;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 49;
                stan::model::assign(logodds, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (get_base1(logodds_min, g, "logodds_min", 1) + ((get_base1(logodds_max, g, "logodds_max", 1) - get_base1(logodds_min, g, "logodds_min", 1)) * get_base1(logodds_raw, g, "logodds_raw", 1))), 
                            "assigning variable logodds");
                current_statement_begin__ = 50;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (1 / (1 + stan::math::exp(-(get_base1(logodds, g, "logodds", 1))))), 
                            "assigning variable p");
                current_statement_begin__ = 51;
                for (int j = 1; j <= 3; ++j) {
                    current_statement_begin__ = 52;
                    stan::model::assign(shape, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(get_base1(shape_min, g, "shape_min", 1), j, "shape_min", 2) + ((get_base1(get_base1(shape_max, g, "shape_max", 1), j, "shape_max", 2) - get_base1(get_base1(shape_min, g, "shape_min", 1), j, "shape_min", 2)) * get_base1(get_base1(shape_raw, g, "shape_raw", 1), j, "shape_raw", 2))), 
                                "assigning variable shape");
                    current_statement_begin__ = 53;
                    stan::model::assign(scale, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(get_base1(median_time_to_next_event, g, "median_time_to_next_event", 1), j, "median_time_to_next_event", 2) / pow(stan::math::log(2), (1 / get_base1(get_base1(shape, g, "shape", 1), j, "shape", 2)))), 
                                "assigning variable scale");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 43;
            size_t logodds_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(logodds[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logodds" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logodds: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 44;
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(p[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 45;
            size_t scale_k_0_max__ = M_groups;
            size_t scale_k_1_max__ = 3;
            for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < scale_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(scale[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: scale" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable scale: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 46;
            size_t shape_k_0_max__ = M_groups;
            size_t shape_k_1_max__ = 3;
            for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < shape_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(shape[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: shape" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable shape: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 63;
            int group(0);
            (void) group;  // dummy to suppress unused var warning
            stan::math::fill(group, std::numeric_limits<int>::min());
            current_statement_begin__ = 64;
            local_scalar_t__ eps(DUMMY_VAR__);
            (void) eps;  // dummy to suppress unused var warning
            stan::math::initialize(eps, DUMMY_VAR__);
            stan::math::fill(eps, DUMMY_VAR__);
            stan::math::assign(eps,1e-6);
            current_statement_begin__ = 67;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 68;
                lp_accum__.add(normal_log<propto__>(get_base1(logodds, g, "logodds", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1)));
                if (get_base1(logodds, g, "logodds", 1) < get_base1(logodds_min, g, "logodds_min", 1)) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(logodds, g, "logodds", 1) > get_base1(logodds_max, g, "logodds_max", 1)) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(get_base1(logodds_max, g, "logodds_max", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1)), normal_cdf_log(get_base1(logodds_min, g, "logodds_min", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1))));
                current_statement_begin__ = 69;
                for (int j = 1; j <= 3; ++j) {
                    current_statement_begin__ = 70;
                    lp_accum__.add(uniform_log<propto__>(get_base1(get_base1(shape, g, "shape", 1), j, "shape", 2), get_base1(get_base1(shape_min, g, "shape_min", 1), j, "shape_min", 2), get_base1(get_base1(shape_max, g, "shape_max", 1), j, "shape_max", 2)));
                    current_statement_begin__ = 72;
                    lp_accum__.add(normal_log<propto__>(get_base1(get_base1(median_time_to_next_event, g, "median_time_to_next_event", 1), j, "median_time_to_next_event", 2), get_base1(get_base1(median_time_to_next_event_mean, g, "median_time_to_next_event_mean", 1), j, "median_time_to_next_event_mean", 2), get_base1(get_base1(median_time_to_next_event_sd, g, "median_time_to_next_event_sd", 1), j, "median_time_to_next_event_sd", 2)));
                    if (get_base1(get_base1(median_time_to_next_event, g, "median_time_to_next_event", 1), j, "median_time_to_next_event", 2) < stan::math::sqrt(stan::math::machine_precision())) lp_accum__.add(-std::numeric_limits<double>::infinity());
                    else lp_accum__.add(-normal_ccdf_log(stan::math::sqrt(stan::math::machine_precision()), get_base1(get_base1(median_time_to_next_event_mean, g, "median_time_to_next_event_mean", 1), j, "median_time_to_next_event_mean", 2), get_base1(get_base1(median_time_to_next_event_sd, g, "median_time_to_next_event_sd", 1), j, "median_time_to_next_event_sd", 2)));
                }
            }
            current_statement_begin__ = 80;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 81;
                stan::math::assign(group, get_base1(group_id, i, "group_id", 1));
                current_statement_begin__ = 82;
                if (as_bool(logical_eq(get_base1(from, i, "from", 1), get_base1(to, i, "to", 1)))) {
                    current_statement_begin__ = 83;
                    std::stringstream errmsg_stream__;
                    errmsg_stream__ << "from[i] == to[i] for i = ";
                    errmsg_stream__ << i;
                    throw std::domain_error(errmsg_stream__.str());
                }
                current_statement_begin__ = 85;
                if (as_bool(logical_eq(get_base1(from, i, "from", 1), 1))) {
                    current_statement_begin__ = 86;
                    if (as_bool(logical_eq(get_base1(to, i, "to", 1), 2))) {
                        current_statement_begin__ = 87;
                        lp_accum__.add(stan::math::log(((get_base1(p, group, "p", 1) * (weibull_cdf(get_base1(dt_max, i, "dt_max", 1), get_base1(get_base1(shape, group, "shape", 1), 1, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 1, "scale", 2)) - weibull_cdf(get_base1(dt_min, i, "dt_min", 1), get_base1(get_base1(shape, group, "shape", 1), 1, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 1, "scale", 2)))) + eps)));
                    }
                    current_statement_begin__ = 95;
                    if (as_bool(logical_eq(get_base1(to, i, "to", 1), 3))) {
                        current_statement_begin__ = 96;
                        lp_accum__.add(stan::math::log((((1 - get_base1(p, group, "p", 1)) * (weibull_cdf(get_base1(dt_max, i, "dt_max", 1), get_base1(get_base1(shape, group, "shape", 1), 2, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 2, "scale", 2)) - weibull_cdf(get_base1(dt_min, i, "dt_min", 1), get_base1(get_base1(shape, group, "shape", 1), 2, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 2, "scale", 2)))) + eps)));
                    }
                    current_statement_begin__ = 104;
                    if (as_bool(logical_eq(get_base1(to, i, "to", 1), 4))) {
                        current_statement_begin__ = 105;
                        lp_accum__.add(stan::math::log((((get_base1(p, group, "p", 1) * (1 - weibull_cdf(get_base1(dt_min, i, "dt_min", 1), get_base1(get_base1(shape, group, "shape", 1), 1, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 1, "scale", 2)))) + ((1 - get_base1(p, group, "p", 1)) * (1 - weibull_cdf(get_base1(dt_min, i, "dt_min", 1), get_base1(get_base1(shape, group, "shape", 1), 2, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 2, "scale", 2))))) + eps)));
                    }
                }
                current_statement_begin__ = 112;
                if (as_bool(logical_eq(get_base1(from, i, "from", 1), 2))) {
                    current_statement_begin__ = 113;
                    if (as_bool(logical_eq(get_base1(to, i, "to", 1), 3))) {
                        current_statement_begin__ = 114;
                        lp_accum__.add(stan::math::log(((weibull_cdf(get_base1(dt_max, i, "dt_max", 1), get_base1(get_base1(shape, group, "shape", 1), 3, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 3, "scale", 2)) - weibull_cdf(get_base1(dt_min, i, "dt_min", 1), get_base1(get_base1(shape, group, "shape", 1), 3, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 3, "scale", 2))) + eps)));
                    }
                    current_statement_begin__ = 120;
                    if (as_bool(logical_eq(get_base1(to, i, "to", 1), 4))) {
                        current_statement_begin__ = 121;
                        lp_accum__.add(stan::math::log(((1 - weibull_cdf(get_base1(dt_min, i, "dt_min", 1), get_base1(get_base1(shape, group, "shape", 1), 3, "shape", 2), get_base1(get_base1(scale, group, "scale", 1), 3, "scale", 2))) + eps)));
                    }
                }
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("logodds_raw");
        names__.push_back("median_time_to_next_event");
        names__.push_back("shape_raw");
        names__.push_back("logodds");
        names__.push_back("p");
        names__.push_back("scale");
        names__.push_back("shape");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dims__.push_back(3);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_srp_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> logodds_raw;
        size_t logodds_raw_d_0_max__ = M_groups;
        logodds_raw.reserve(logodds_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < logodds_raw_d_0_max__; ++d_0__) {
            logodds_raw.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t logodds_raw_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < logodds_raw_k_0_max__; ++k_0__) {
            vars__.push_back(logodds_raw[k_0__]);
        }
        std::vector<std::vector<double> > median_time_to_next_event;
        size_t median_time_to_next_event_d_0_max__ = M_groups;
        size_t median_time_to_next_event_d_1_max__ = 3;
        median_time_to_next_event.resize(median_time_to_next_event_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < median_time_to_next_event_d_0_max__; ++d_0__) {
            median_time_to_next_event[d_0__].reserve(median_time_to_next_event_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < median_time_to_next_event_d_1_max__; ++d_1__) {
                median_time_to_next_event[d_0__].push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision())));
            }
        }
        size_t median_time_to_next_event_k_0_max__ = M_groups;
        size_t median_time_to_next_event_k_1_max__ = 3;
        for (size_t k_1__ = 0; k_1__ < median_time_to_next_event_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < median_time_to_next_event_k_0_max__; ++k_0__) {
                vars__.push_back(median_time_to_next_event[k_0__][k_1__]);
            }
        }
        std::vector<std::vector<double> > shape_raw;
        size_t shape_raw_d_0_max__ = M_groups;
        size_t shape_raw_d_1_max__ = 3;
        shape_raw.resize(shape_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < shape_raw_d_0_max__; ++d_0__) {
            shape_raw[d_0__].reserve(shape_raw_d_1_max__);
            for (size_t d_1__ = 0; d_1__ < shape_raw_d_1_max__; ++d_1__) {
                shape_raw[d_0__].push_back(in__.scalar_lub_constrain(0, 1));
            }
        }
        size_t shape_raw_k_0_max__ = M_groups;
        size_t shape_raw_k_1_max__ = 3;
        for (size_t k_1__ = 0; k_1__ < shape_raw_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < shape_raw_k_0_max__; ++k_0__) {
                vars__.push_back(shape_raw[k_0__][k_1__]);
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("logodds", "M_groups", M_groups);
            std::vector<double> logodds(M_groups, double(0));
            stan::math::initialize(logodds, DUMMY_VAR__);
            stan::math::fill(logodds, DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("p", "M_groups", M_groups);
            std::vector<double> p(M_groups, double(0));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 45;
            validate_non_negative_index("scale", "M_groups", M_groups);
            validate_non_negative_index("scale", "3", 3);
            std::vector<std::vector<double> > scale(M_groups, std::vector<double>(3, double(0)));
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            current_statement_begin__ = 46;
            validate_non_negative_index("shape", "M_groups", M_groups);
            validate_non_negative_index("shape", "3", 3);
            std::vector<std::vector<double> > shape(M_groups, std::vector<double>(3, double(0)));
            stan::math::initialize(shape, DUMMY_VAR__);
            stan::math::fill(shape, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 48;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 49;
                stan::model::assign(logodds, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (get_base1(logodds_min, g, "logodds_min", 1) + ((get_base1(logodds_max, g, "logodds_max", 1) - get_base1(logodds_min, g, "logodds_min", 1)) * get_base1(logodds_raw, g, "logodds_raw", 1))), 
                            "assigning variable logodds");
                current_statement_begin__ = 50;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (1 / (1 + stan::math::exp(-(get_base1(logodds, g, "logodds", 1))))), 
                            "assigning variable p");
                current_statement_begin__ = 51;
                for (int j = 1; j <= 3; ++j) {
                    current_statement_begin__ = 52;
                    stan::model::assign(shape, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(get_base1(shape_min, g, "shape_min", 1), j, "shape_min", 2) + ((get_base1(get_base1(shape_max, g, "shape_max", 1), j, "shape_max", 2) - get_base1(get_base1(shape_min, g, "shape_min", 1), j, "shape_min", 2)) * get_base1(get_base1(shape_raw, g, "shape_raw", 1), j, "shape_raw", 2))), 
                                "assigning variable shape");
                    current_statement_begin__ = 53;
                    stan::model::assign(scale, 
                                stan::model::cons_list(stan::model::index_uni(g), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(get_base1(median_time_to_next_event, g, "median_time_to_next_event", 1), j, "median_time_to_next_event", 2) / pow(stan::math::log(2), (1 / get_base1(get_base1(shape, g, "shape", 1), j, "shape", 2)))), 
                                "assigning variable scale");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t logodds_k_0_max__ = M_groups;
                for (size_t k_0__ = 0; k_0__ < logodds_k_0_max__; ++k_0__) {
                    vars__.push_back(logodds[k_0__]);
                }
                size_t p_k_0_max__ = M_groups;
                for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                    vars__.push_back(p[k_0__]);
                }
                size_t scale_k_0_max__ = M_groups;
                size_t scale_k_1_max__ = 3;
                for (size_t k_1__ = 0; k_1__ < scale_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                        vars__.push_back(scale[k_0__][k_1__]);
                    }
                }
                size_t shape_k_0_max__ = M_groups;
                size_t shape_k_1_max__ = 3;
                for (size_t k_1__ = 0; k_1__ < shape_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
                        vars__.push_back(shape[k_0__][k_1__]);
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_srp_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t logodds_raw_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < logodds_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logodds_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t median_time_to_next_event_k_0_max__ = M_groups;
        size_t median_time_to_next_event_k_1_max__ = 3;
        for (size_t k_1__ = 0; k_1__ < median_time_to_next_event_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < median_time_to_next_event_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "median_time_to_next_event" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t shape_raw_k_0_max__ = M_groups;
        size_t shape_raw_k_1_max__ = 3;
        for (size_t k_1__ = 0; k_1__ < shape_raw_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < shape_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "shape_raw" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logodds_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logodds" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t scale_k_0_max__ = M_groups;
            size_t scale_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < scale_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "scale" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t shape_k_0_max__ = M_groups;
            size_t shape_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < shape_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "shape" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t logodds_raw_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < logodds_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logodds_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t median_time_to_next_event_k_0_max__ = M_groups;
        size_t median_time_to_next_event_k_1_max__ = 3;
        for (size_t k_1__ = 0; k_1__ < median_time_to_next_event_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < median_time_to_next_event_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "median_time_to_next_event" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t shape_raw_k_0_max__ = M_groups;
        size_t shape_raw_k_1_max__ = 3;
        for (size_t k_1__ = 0; k_1__ < shape_raw_k_1_max__; ++k_1__) {
            for (size_t k_0__ = 0; k_0__ < shape_raw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "shape_raw" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t logodds_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logodds" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t scale_k_0_max__ = M_groups;
            size_t scale_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < scale_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "scale" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t shape_k_0_max__ = M_groups;
            size_t shape_k_1_max__ = 3;
            for (size_t k_1__ = 0; k_1__ < shape_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "shape" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_srp_model_namespace::model_srp_model stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
