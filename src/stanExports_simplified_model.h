// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_simplified_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_simplified_model");
    reader.add_event(127, 125, "end", "model_simplified_model");
    return reader;
}
#include <stan_meta_header.hpp>
class model_simplified_model
  : public stan::model::model_base_crtp<model_simplified_model> {
private:
        int M_groups;
        int N_A;
        int N_B;
        int N_C;
        int N_D;
        std::vector<int> group_id_A;
        std::vector<int> group_id_B;
        std::vector<int> group_id_C;
        std::vector<int> group_id_D;
        std::vector<double> dt1_A;
        std::vector<double> dt2_A;
        std::vector<double> dt1_B;
        std::vector<int> n_recruited_per_group;
        std::vector<std::vector<double> > dt_recruitment;
        std::vector<double> visit_spacing;
        std::vector<double> logodds_mean;
        std::vector<double> logodds_sd;
        vector_d logodds_min;
        vector_d logodds_max;
        std::vector<double> log_shape_mean;
        std::vector<double> log_shape_sd;
        std::vector<double> median_time_to_response_mean;
        std::vector<double> median_time_to_response_sd;
        std::vector<double> monthly_rate_mean;
        std::vector<double> monthly_rate_sd;
        int N_all;
public:
    model_simplified_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_simplified_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_simplified_model_namespace::model_simplified_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "M_groups", "int", context__.to_vec());
            M_groups = int(0);
            vals_i__ = context__.vals_i("M_groups");
            pos__ = 0;
            M_groups = vals_i__[pos__++];
            check_greater_or_equal(function__, "M_groups", M_groups, 1);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "N_A", "int", context__.to_vec());
            N_A = int(0);
            vals_i__ = context__.vals_i("N_A");
            pos__ = 0;
            N_A = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_A", N_A, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "N_B", "int", context__.to_vec());
            N_B = int(0);
            vals_i__ = context__.vals_i("N_B");
            pos__ = 0;
            N_B = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_B", N_B, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "N_C", "int", context__.to_vec());
            N_C = int(0);
            vals_i__ = context__.vals_i("N_C");
            pos__ = 0;
            N_C = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_C", N_C, 0);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "N_D", "int", context__.to_vec());
            N_D = int(0);
            vals_i__ = context__.vals_i("N_D");
            pos__ = 0;
            N_D = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_D", N_D, 0);
            current_statement_begin__ = 15;
            validate_non_negative_index("group_id_A", "N_A", N_A);
            context__.validate_dims("data initialization", "group_id_A", "int", context__.to_vec(N_A));
            group_id_A = std::vector<int>(N_A, int(0));
            vals_i__ = context__.vals_i("group_id_A");
            pos__ = 0;
            size_t group_id_A_k_0_max__ = N_A;
            for (size_t k_0__ = 0; k_0__ < group_id_A_k_0_max__; ++k_0__) {
                group_id_A[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_A_i_0_max__ = N_A;
            for (size_t i_0__ = 0; i_0__ < group_id_A_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_A[i_0__]", group_id_A[i_0__], 1);
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("group_id_B", "N_B", N_B);
            context__.validate_dims("data initialization", "group_id_B", "int", context__.to_vec(N_B));
            group_id_B = std::vector<int>(N_B, int(0));
            vals_i__ = context__.vals_i("group_id_B");
            pos__ = 0;
            size_t group_id_B_k_0_max__ = N_B;
            for (size_t k_0__ = 0; k_0__ < group_id_B_k_0_max__; ++k_0__) {
                group_id_B[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_B_i_0_max__ = N_B;
            for (size_t i_0__ = 0; i_0__ < group_id_B_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_B[i_0__]", group_id_B[i_0__], 1);
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("group_id_C", "N_C", N_C);
            context__.validate_dims("data initialization", "group_id_C", "int", context__.to_vec(N_C));
            group_id_C = std::vector<int>(N_C, int(0));
            vals_i__ = context__.vals_i("group_id_C");
            pos__ = 0;
            size_t group_id_C_k_0_max__ = N_C;
            for (size_t k_0__ = 0; k_0__ < group_id_C_k_0_max__; ++k_0__) {
                group_id_C[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_C_i_0_max__ = N_C;
            for (size_t i_0__ = 0; i_0__ < group_id_C_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_C[i_0__]", group_id_C[i_0__], 1);
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("group_id_D", "N_D", N_D);
            context__.validate_dims("data initialization", "group_id_D", "int", context__.to_vec(N_D));
            group_id_D = std::vector<int>(N_D, int(0));
            vals_i__ = context__.vals_i("group_id_D");
            pos__ = 0;
            size_t group_id_D_k_0_max__ = N_D;
            for (size_t k_0__ = 0; k_0__ < group_id_D_k_0_max__; ++k_0__) {
                group_id_D[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_D_i_0_max__ = N_D;
            for (size_t i_0__ = 0; i_0__ < group_id_D_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_D[i_0__]", group_id_D[i_0__], 1);
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("dt1_A", "N_A", N_A);
            context__.validate_dims("data initialization", "dt1_A", "double", context__.to_vec(N_A));
            dt1_A = std::vector<double>(N_A, double(0));
            vals_r__ = context__.vals_r("dt1_A");
            pos__ = 0;
            size_t dt1_A_k_0_max__ = N_A;
            for (size_t k_0__ = 0; k_0__ < dt1_A_k_0_max__; ++k_0__) {
                dt1_A[k_0__] = vals_r__[pos__++];
            }
            size_t dt1_A_i_0_max__ = N_A;
            for (size_t i_0__ = 0; i_0__ < dt1_A_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt1_A[i_0__]", dt1_A[i_0__], 0);
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("dt2_A", "N_A", N_A);
            context__.validate_dims("data initialization", "dt2_A", "double", context__.to_vec(N_A));
            dt2_A = std::vector<double>(N_A, double(0));
            vals_r__ = context__.vals_r("dt2_A");
            pos__ = 0;
            size_t dt2_A_k_0_max__ = N_A;
            for (size_t k_0__ = 0; k_0__ < dt2_A_k_0_max__; ++k_0__) {
                dt2_A[k_0__] = vals_r__[pos__++];
            }
            size_t dt2_A_i_0_max__ = N_A;
            for (size_t i_0__ = 0; i_0__ < dt2_A_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt2_A[i_0__]", dt2_A[i_0__], 0);
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("dt1_B", "N_B", N_B);
            context__.validate_dims("data initialization", "dt1_B", "double", context__.to_vec(N_B));
            dt1_B = std::vector<double>(N_B, double(0));
            vals_r__ = context__.vals_r("dt1_B");
            pos__ = 0;
            size_t dt1_B_k_0_max__ = N_B;
            for (size_t k_0__ = 0; k_0__ < dt1_B_k_0_max__; ++k_0__) {
                dt1_B[k_0__] = vals_r__[pos__++];
            }
            size_t dt1_B_i_0_max__ = N_B;
            for (size_t i_0__ = 0; i_0__ < dt1_B_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt1_B[i_0__]", dt1_B[i_0__], 0);
            }
            current_statement_begin__ = 24;
            validate_non_negative_index("n_recruited_per_group", "M_groups", M_groups);
            context__.validate_dims("data initialization", "n_recruited_per_group", "int", context__.to_vec(M_groups));
            n_recruited_per_group = std::vector<int>(M_groups, int(0));
            vals_i__ = context__.vals_i("n_recruited_per_group");
            pos__ = 0;
            size_t n_recruited_per_group_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < n_recruited_per_group_k_0_max__; ++k_0__) {
                n_recruited_per_group[k_0__] = vals_i__[pos__++];
            }
            size_t n_recruited_per_group_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < n_recruited_per_group_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_recruited_per_group[i_0__]", n_recruited_per_group[i_0__], 0);
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("dt_recruitment", "((N_A + N_B) + N_C)", ((N_A + N_B) + N_C));
            validate_non_negative_index("dt_recruitment", "M_groups", M_groups);
            context__.validate_dims("data initialization", "dt_recruitment", "double", context__.to_vec(((N_A + N_B) + N_C),M_groups));
            dt_recruitment = std::vector<std::vector<double> >(((N_A + N_B) + N_C), std::vector<double>(M_groups, double(0)));
            vals_r__ = context__.vals_r("dt_recruitment");
            pos__ = 0;
            size_t dt_recruitment_k_0_max__ = ((N_A + N_B) + N_C);
            size_t dt_recruitment_k_1_max__ = M_groups;
            for (size_t k_1__ = 0; k_1__ < dt_recruitment_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < dt_recruitment_k_0_max__; ++k_0__) {
                    dt_recruitment[k_0__][k_1__] = vals_r__[pos__++];
                }
            }
            size_t dt_recruitment_i_0_max__ = ((N_A + N_B) + N_C);
            size_t dt_recruitment_i_1_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < dt_recruitment_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < dt_recruitment_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "dt_recruitment[i_0__][i_1__]", dt_recruitment[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("visit_spacing", "M_groups", M_groups);
            context__.validate_dims("data initialization", "visit_spacing", "double", context__.to_vec(M_groups));
            visit_spacing = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("visit_spacing");
            pos__ = 0;
            size_t visit_spacing_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < visit_spacing_k_0_max__; ++k_0__) {
                visit_spacing[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("logodds_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_mean", "double", context__.to_vec(M_groups));
            logodds_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_mean");
            pos__ = 0;
            size_t logodds_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_mean_k_0_max__; ++k_0__) {
                logodds_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 33;
            validate_non_negative_index("logodds_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_sd", "double", context__.to_vec(M_groups));
            logodds_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_sd");
            pos__ = 0;
            size_t logodds_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_sd_k_0_max__; ++k_0__) {
                logodds_sd[k_0__] = vals_r__[pos__++];
            }
            size_t logodds_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < logodds_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "logodds_sd[i_0__]", logodds_sd[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 34;
            validate_non_negative_index("logodds_min", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_min", "vector_d", context__.to_vec(M_groups));
            logodds_min = Eigen::Matrix<double, Eigen::Dynamic, 1>(M_groups);
            vals_r__ = context__.vals_r("logodds_min");
            pos__ = 0;
            size_t logodds_min_j_1_max__ = M_groups;
            for (size_t j_1__ = 0; j_1__ < logodds_min_j_1_max__; ++j_1__) {
                logodds_min(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("logodds_max", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_max", "vector_d", context__.to_vec(M_groups));
            logodds_max = Eigen::Matrix<double, Eigen::Dynamic, 1>(M_groups);
            vals_r__ = context__.vals_r("logodds_max");
            pos__ = 0;
            size_t logodds_max_j_1_max__ = M_groups;
            for (size_t j_1__ = 0; j_1__ < logodds_max_j_1_max__; ++j_1__) {
                logodds_max(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 37;
            validate_non_negative_index("log_shape_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "log_shape_mean", "double", context__.to_vec(M_groups));
            log_shape_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("log_shape_mean");
            pos__ = 0;
            size_t log_shape_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < log_shape_mean_k_0_max__; ++k_0__) {
                log_shape_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 38;
            validate_non_negative_index("log_shape_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "log_shape_sd", "double", context__.to_vec(M_groups));
            log_shape_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("log_shape_sd");
            pos__ = 0;
            size_t log_shape_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < log_shape_sd_k_0_max__; ++k_0__) {
                log_shape_sd[k_0__] = vals_r__[pos__++];
            }
            size_t log_shape_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < log_shape_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "log_shape_sd[i_0__]", log_shape_sd[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 40;
            validate_non_negative_index("median_time_to_response_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "median_time_to_response_mean", "double", context__.to_vec(M_groups));
            median_time_to_response_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("median_time_to_response_mean");
            pos__ = 0;
            size_t median_time_to_response_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < median_time_to_response_mean_k_0_max__; ++k_0__) {
                median_time_to_response_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 41;
            validate_non_negative_index("median_time_to_response_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "median_time_to_response_sd", "double", context__.to_vec(M_groups));
            median_time_to_response_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("median_time_to_response_sd");
            pos__ = 0;
            size_t median_time_to_response_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < median_time_to_response_sd_k_0_max__; ++k_0__) {
                median_time_to_response_sd[k_0__] = vals_r__[pos__++];
            }
            size_t median_time_to_response_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < median_time_to_response_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "median_time_to_response_sd[i_0__]", median_time_to_response_sd[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 43;
            validate_non_negative_index("monthly_rate_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "monthly_rate_mean", "double", context__.to_vec(M_groups));
            monthly_rate_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("monthly_rate_mean");
            pos__ = 0;
            size_t monthly_rate_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < monthly_rate_mean_k_0_max__; ++k_0__) {
                monthly_rate_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("monthly_rate_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "monthly_rate_sd", "double", context__.to_vec(M_groups));
            monthly_rate_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("monthly_rate_sd");
            pos__ = 0;
            size_t monthly_rate_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < monthly_rate_sd_k_0_max__; ++k_0__) {
                monthly_rate_sd[k_0__] = vals_r__[pos__++];
            }
            size_t monthly_rate_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < monthly_rate_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "monthly_rate_sd[i_0__]", monthly_rate_sd[i_0__], stan::math::machine_precision());
            }
            // initialize transformed data variables
            current_statement_begin__ = 51;
            N_all = int(0);
            stan::math::fill(N_all, std::numeric_limits<int>::min());
            stan::math::assign(N_all,(((N_A + N_B) + N_C) + N_D));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 59;
            validate_non_negative_index("logodds_raw", "M_groups", M_groups);
            num_params_r__ += M_groups;
            current_statement_begin__ = 60;
            validate_non_negative_index("log_shape", "M_groups", M_groups);
            num_params_r__ += (1 * M_groups);
            current_statement_begin__ = 61;
            validate_non_negative_index("median_time_to_response", "M_groups", M_groups);
            num_params_r__ += (1 * M_groups);
            current_statement_begin__ = 62;
            validate_non_negative_index("monthly_rate", "M_groups", M_groups);
            num_params_r__ += (1 * M_groups);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_simplified_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 59;
        if (!(context__.contains_r("logodds_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logodds_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logodds_raw");
        pos__ = 0U;
        validate_non_negative_index("logodds_raw", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "logodds_raw", "vector_d", context__.to_vec(M_groups));
        Eigen::Matrix<double, Eigen::Dynamic, 1> logodds_raw(M_groups);
        size_t logodds_raw_j_1_max__ = M_groups;
        for (size_t j_1__ = 0; j_1__ < logodds_raw_j_1_max__; ++j_1__) {
            logodds_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, logodds_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logodds_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("log_shape")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_shape missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_shape");
        pos__ = 0U;
        validate_non_negative_index("log_shape", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "log_shape", "double", context__.to_vec(M_groups));
        std::vector<double> log_shape(M_groups, double(0));
        size_t log_shape_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < log_shape_k_0_max__; ++k_0__) {
            log_shape[k_0__] = vals_r__[pos__++];
        }
        size_t log_shape_i_0_max__ = M_groups;
        for (size_t i_0__ = 0; i_0__ < log_shape_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(log_shape[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_shape: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("median_time_to_response")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable median_time_to_response missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("median_time_to_response");
        pos__ = 0U;
        validate_non_negative_index("median_time_to_response", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "median_time_to_response", "double", context__.to_vec(M_groups));
        std::vector<double> median_time_to_response(M_groups, double(0));
        size_t median_time_to_response_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < median_time_to_response_k_0_max__; ++k_0__) {
            median_time_to_response[k_0__] = vals_r__[pos__++];
        }
        size_t median_time_to_response_i_0_max__ = M_groups;
        for (size_t i_0__ = 0; i_0__ < median_time_to_response_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(stan::math::sqrt(stan::math::machine_precision()), median_time_to_response[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable median_time_to_response: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 62;
        if (!(context__.contains_r("monthly_rate")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable monthly_rate missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("monthly_rate");
        pos__ = 0U;
        validate_non_negative_index("monthly_rate", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "monthly_rate", "double", context__.to_vec(M_groups));
        std::vector<double> monthly_rate(M_groups, double(0));
        size_t monthly_rate_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < monthly_rate_k_0_max__; ++k_0__) {
            monthly_rate[k_0__] = vals_r__[pos__++];
        }
        size_t monthly_rate_i_0_max__ = M_groups;
        for (size_t i_0__ = 0; i_0__ < monthly_rate_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(stan::math::sqrt(stan::math::machine_precision()), monthly_rate[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable monthly_rate: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 59;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logodds_raw;
            (void) logodds_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                logodds_raw = in__.vector_lub_constrain(0, 1, M_groups, lp__);
            else
                logodds_raw = in__.vector_lub_constrain(0, 1, M_groups);
            current_statement_begin__ = 60;
            std::vector<local_scalar_t__> log_shape;
            size_t log_shape_d_0_max__ = M_groups;
            log_shape.reserve(log_shape_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log_shape_d_0_max__; ++d_0__) {
                if (jacobian__)
                    log_shape.push_back(in__.scalar_constrain(lp__));
                else
                    log_shape.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 61;
            std::vector<local_scalar_t__> median_time_to_response;
            size_t median_time_to_response_d_0_max__ = M_groups;
            median_time_to_response.reserve(median_time_to_response_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < median_time_to_response_d_0_max__; ++d_0__) {
                if (jacobian__)
                    median_time_to_response.push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision()), lp__));
                else
                    median_time_to_response.push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision())));
            }
            current_statement_begin__ = 62;
            std::vector<local_scalar_t__> monthly_rate;
            size_t monthly_rate_d_0_max__ = M_groups;
            monthly_rate.reserve(monthly_rate_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < monthly_rate_d_0_max__; ++d_0__) {
                if (jacobian__)
                    monthly_rate.push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision()), lp__));
                else
                    monthly_rate.push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision())));
            }
            // transformed parameters
            current_statement_begin__ = 70;
            validate_non_negative_index("p", "M_groups", M_groups);
            std::vector<local_scalar_t__> p(M_groups, local_scalar_t__(0));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("shape", "M_groups", M_groups);
            std::vector<local_scalar_t__> shape(M_groups, local_scalar_t__(0));
            stan::math::initialize(shape, DUMMY_VAR__);
            stan::math::fill(shape, DUMMY_VAR__);
            stan::math::assign(shape,stan::math::exp(log_shape));
            current_statement_begin__ = 72;
            validate_non_negative_index("scale", "M_groups", M_groups);
            std::vector<local_scalar_t__> scale(M_groups, local_scalar_t__(0));
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            current_statement_begin__ = 73;
            validate_non_negative_index("logodds", "M_groups", M_groups);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logodds(M_groups);
            stan::math::initialize(logodds, DUMMY_VAR__);
            stan::math::fill(logodds, DUMMY_VAR__);
            stan::math::assign(logodds,add(logodds_min, elt_multiply(subtract(logodds_max, logodds_min), logodds_raw)));
            // transformed parameters block statements
            current_statement_begin__ = 75;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 76;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (1 / (1 + stan::math::exp(-(get_base1(logodds, g, "logodds", 1))))), 
                            "assigning variable p");
                current_statement_begin__ = 77;
                stan::model::assign(scale, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (get_base1(median_time_to_response, g, "median_time_to_response", 1) / pow(stan::math::log(2), (1 / get_base1(shape, g, "shape", 1)))), 
                            "assigning variable scale");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 70;
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(p[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 71;
            size_t shape_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(shape[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: shape" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable shape: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 72;
            size_t scale_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(scale[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: scale" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable scale: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 73;
            size_t logodds_j_1_max__ = M_groups;
            for (size_t j_1__ = 0; j_1__ < logodds_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logodds(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logodds" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logodds: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 86;
            int group_id(0);
            (void) group_id;  // dummy to suppress unused var warning
            stan::math::fill(group_id, std::numeric_limits<int>::min());
            current_statement_begin__ = 89;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 90;
                lp_accum__.add(normal_log<propto__>(get_base1(logodds, g, "logodds", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1)));
                if (get_base1(logodds, g, "logodds", 1) < get_base1(logodds_min, g, "logodds_min", 1)) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(logodds, g, "logodds", 1) > get_base1(logodds_max, g, "logodds_max", 1)) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(get_base1(logodds_max, g, "logodds_max", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1)), normal_cdf_log(get_base1(logodds_min, g, "logodds_min", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1))));
                current_statement_begin__ = 91;
                lp_accum__.add(normal_log<propto__>(get_base1(log_shape, g, "log_shape", 1), get_base1(log_shape_mean, g, "log_shape_mean", 1), get_base1(log_shape_sd, g, "log_shape_sd", 1)));
                current_statement_begin__ = 92;
                lp_accum__.add(normal_log<propto__>(get_base1(median_time_to_response, g, "median_time_to_response", 1), get_base1(median_time_to_response_mean, g, "median_time_to_response_mean", 1), get_base1(median_time_to_response_sd, g, "median_time_to_response_sd", 1)));
                if (get_base1(median_time_to_response, g, "median_time_to_response", 1) < stan::math::sqrt(stan::math::machine_precision())) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(stan::math::sqrt(stan::math::machine_precision()), get_base1(median_time_to_response_mean, g, "median_time_to_response_mean", 1), get_base1(median_time_to_response_sd, g, "median_time_to_response_sd", 1)));
                current_statement_begin__ = 93;
                lp_accum__.add(normal_log<propto__>(get_base1(monthly_rate, g, "monthly_rate", 1), get_base1(monthly_rate_mean, g, "monthly_rate_mean", 1), get_base1(monthly_rate_sd, g, "monthly_rate_sd", 1)));
                if (get_base1(monthly_rate, g, "monthly_rate", 1) < stan::math::sqrt(stan::math::machine_precision())) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(stan::math::sqrt(stan::math::machine_precision()), get_base1(monthly_rate_mean, g, "monthly_rate_mean", 1), get_base1(monthly_rate_sd, g, "monthly_rate_sd", 1)));
            }
            current_statement_begin__ = 97;
            for (int i = 1; i <= M_groups; ++i) {
                current_statement_begin__ = 98;
                lp_accum__.add(exponential_log<propto__>(stan::model::rvalue(dt_recruitment, stan::model::cons_list(stan::model::index_min_max(1, get_base1(n_recruited_per_group, i, "n_recruited_per_group", 1)), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "dt_recruitment"), get_base1(monthly_rate, i, "monthly_rate", 1)));
            }
            current_statement_begin__ = 102;
            for (int i = 1; i <= N_C; ++i) {
                current_statement_begin__ = 103;
                stan::math::assign(group_id, get_base1(group_id_C, i, "group_id_C", 1));
                current_statement_begin__ = 104;
                lp_accum__.add(stan::math::log((1 - get_base1(p, group_id, "p", 1))));
            }
            current_statement_begin__ = 108;
            for (int i = 1; i <= N_A; ++i) {
                current_statement_begin__ = 109;
                stan::math::assign(group_id, get_base1(group_id_A, i, "group_id_A", 1));
                current_statement_begin__ = 110;
                lp_accum__.add(stan::math::log((get_base1(p, group_id, "p", 1) * (weibull_cdf(get_base1(dt2_A, i, "dt2_A", 1), get_base1(shape, group_id, "shape", 1), get_base1(scale, group_id, "scale", 1)) - weibull_cdf(get_base1(dt1_A, i, "dt1_A", 1), get_base1(shape, group_id, "shape", 1), get_base1(scale, group_id, "scale", 1))))));
            }
            current_statement_begin__ = 118;
            for (int i = 1; i <= N_B; ++i) {
                current_statement_begin__ = 119;
                stan::math::assign(group_id, get_base1(group_id_B, i, "group_id_B", 1));
                current_statement_begin__ = 120;
                lp_accum__.add(stan::math::log(((1 - get_base1(p, group_id, "p", 1)) + (get_base1(p, group_id, "p", 1) * (1 - weibull_cdf(get_base1(dt1_B, i, "dt1_B", 1), get_base1(shape, group_id, "shape", 1), get_base1(scale, group_id, "scale", 1)))))));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("logodds_raw");
        names__.push_back("log_shape");
        names__.push_back("median_time_to_response");
        names__.push_back("monthly_rate");
        names__.push_back("p");
        names__.push_back("shape");
        names__.push_back("scale");
        names__.push_back("logodds");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_simplified_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> logodds_raw = in__.vector_lub_constrain(0, 1, M_groups);
        size_t logodds_raw_j_1_max__ = M_groups;
        for (size_t j_1__ = 0; j_1__ < logodds_raw_j_1_max__; ++j_1__) {
            vars__.push_back(logodds_raw(j_1__));
        }
        std::vector<double> log_shape;
        size_t log_shape_d_0_max__ = M_groups;
        log_shape.reserve(log_shape_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log_shape_d_0_max__; ++d_0__) {
            log_shape.push_back(in__.scalar_constrain());
        }
        size_t log_shape_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < log_shape_k_0_max__; ++k_0__) {
            vars__.push_back(log_shape[k_0__]);
        }
        std::vector<double> median_time_to_response;
        size_t median_time_to_response_d_0_max__ = M_groups;
        median_time_to_response.reserve(median_time_to_response_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < median_time_to_response_d_0_max__; ++d_0__) {
            median_time_to_response.push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision())));
        }
        size_t median_time_to_response_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < median_time_to_response_k_0_max__; ++k_0__) {
            vars__.push_back(median_time_to_response[k_0__]);
        }
        std::vector<double> monthly_rate;
        size_t monthly_rate_d_0_max__ = M_groups;
        monthly_rate.reserve(monthly_rate_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < monthly_rate_d_0_max__; ++d_0__) {
            monthly_rate.push_back(in__.scalar_lb_constrain(stan::math::sqrt(stan::math::machine_precision())));
        }
        size_t monthly_rate_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < monthly_rate_k_0_max__; ++k_0__) {
            vars__.push_back(monthly_rate[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 70;
            validate_non_negative_index("p", "M_groups", M_groups);
            std::vector<double> p(M_groups, double(0));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 71;
            validate_non_negative_index("shape", "M_groups", M_groups);
            std::vector<double> shape(M_groups, double(0));
            stan::math::initialize(shape, DUMMY_VAR__);
            stan::math::fill(shape, DUMMY_VAR__);
            stan::math::assign(shape,stan::math::exp(log_shape));
            current_statement_begin__ = 72;
            validate_non_negative_index("scale", "M_groups", M_groups);
            std::vector<double> scale(M_groups, double(0));
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            current_statement_begin__ = 73;
            validate_non_negative_index("logodds", "M_groups", M_groups);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logodds(M_groups);
            stan::math::initialize(logodds, DUMMY_VAR__);
            stan::math::fill(logodds, DUMMY_VAR__);
            stan::math::assign(logodds,add(logodds_min, elt_multiply(subtract(logodds_max, logodds_min), logodds_raw)));
            // do transformed parameters statements
            current_statement_begin__ = 75;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 76;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (1 / (1 + stan::math::exp(-(get_base1(logodds, g, "logodds", 1))))), 
                            "assigning variable p");
                current_statement_begin__ = 77;
                stan::model::assign(scale, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (get_base1(median_time_to_response, g, "median_time_to_response", 1) / pow(stan::math::log(2), (1 / get_base1(shape, g, "shape", 1)))), 
                            "assigning variable scale");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t p_k_0_max__ = M_groups;
                for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                    vars__.push_back(p[k_0__]);
                }
                size_t shape_k_0_max__ = M_groups;
                for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
                    vars__.push_back(shape[k_0__]);
                }
                size_t scale_k_0_max__ = M_groups;
                for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                    vars__.push_back(scale[k_0__]);
                }
                size_t logodds_j_1_max__ = M_groups;
                for (size_t j_1__ = 0; j_1__ < logodds_j_1_max__; ++j_1__) {
                    vars__.push_back(logodds(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_simplified_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t logodds_raw_j_1_max__ = M_groups;
        for (size_t j_1__ = 0; j_1__ < logodds_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logodds_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_shape_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < log_shape_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_shape" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t median_time_to_response_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < median_time_to_response_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "median_time_to_response" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t monthly_rate_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < monthly_rate_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "monthly_rate" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t shape_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "shape" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t scale_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "scale" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logodds_j_1_max__ = M_groups;
            for (size_t j_1__ = 0; j_1__ < logodds_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logodds" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t logodds_raw_j_1_max__ = M_groups;
        for (size_t j_1__ = 0; j_1__ < logodds_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logodds_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_shape_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < log_shape_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_shape" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t median_time_to_response_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < median_time_to_response_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "median_time_to_response" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t monthly_rate_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < monthly_rate_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "monthly_rate" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t shape_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "shape" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t scale_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "scale" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logodds_j_1_max__ = M_groups;
            for (size_t j_1__ = 0; j_1__ < logodds_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logodds" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_simplified_model_namespace::model_simplified_model stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
