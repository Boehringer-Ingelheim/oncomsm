// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_IndependentMixtureCureRateModel_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_IndependentMixtureCureRateModel");
    reader.add_event(229, 227, "end", "model_IndependentMixtureCureRateModel");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, typename T3__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
ttweibull_rng(const T0__& alpha,
                  const T1__& sigma,
                  const T2__& t1,
                  const T3__& t2, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        local_scalar_t__ p1(DUMMY_VAR__);
        (void) p1;  // dummy to suppress unused var warning
        stan::math::initialize(p1, DUMMY_VAR__);
        stan::math::fill(p1, DUMMY_VAR__);
        current_statement_begin__ = 5;
        local_scalar_t__ p2(DUMMY_VAR__);
        (void) p2;  // dummy to suppress unused var warning
        stan::math::initialize(p2, DUMMY_VAR__);
        stan::math::fill(p2, DUMMY_VAR__);
        current_statement_begin__ = 6;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        current_statement_begin__ = 7;
        local_scalar_t__ x(DUMMY_VAR__);
        (void) x;  // dummy to suppress unused var warning
        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x, DUMMY_VAR__);
        current_statement_begin__ = 8;
        stan::math::assign(p1, weibull_cdf(t1, alpha, sigma));
        current_statement_begin__ = 9;
        stan::math::assign(p2, weibull_cdf(t2, alpha, sigma));
        current_statement_begin__ = 10;
        stan::math::assign(u, uniform_rng(p1, p2, base_rng__));
        current_statement_begin__ = 11;
        if (as_bool(logical_lt(u, 1e-4))) {
            current_statement_begin__ = 12;
            stan::math::assign(u, 1e-4);
        }
        current_statement_begin__ = 14;
        if (as_bool(logical_gt(u, (1 - 1e-4)))) {
            current_statement_begin__ = 15;
            stan::math::assign(u, (1 - 1e-4));
        }
        current_statement_begin__ = 17;
        stan::math::assign(x, (sigma * pow(-(log1m(u)), (1 / alpha))));
        current_statement_begin__ = 18;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ttweibull_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& alpha,
                  const T1__& sigma,
                  const T2__& t1,
                  const T3__& t2, RNG& base_rng__, std::ostream* pstream__) const {
        return ttweibull_rng(alpha, sigma, t1, t2, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_IndependentMixtureCureRateModel
  : public stan::model::model_base_crtp<model_IndependentMixtureCureRateModel> {
private:
        int M_groups;
        int N_A;
        int N_B;
        int N_C;
        int N_D;
        std::vector<int> group_id_A;
        std::vector<int> group_id_B;
        std::vector<int> group_id_C;
        std::vector<int> group_id_D;
        std::vector<int> subject_id_A;
        std::vector<int> subject_id_B;
        std::vector<int> subject_id_C;
        std::vector<int> subject_id_D;
        std::vector<double> dt1_A;
        std::vector<double> dt2_A;
        std::vector<double> dt1_B;
        std::vector<double> visit_spacing;
        std::vector<double> logodds_mean;
        std::vector<double> logodds_sd;
        std::vector<double> logodds_min;
        std::vector<double> logodds_max;
        std::vector<double> shape_mean;
        std::vector<double> shape_sd;
        std::vector<double> median_time_to_response_mean;
        std::vector<double> median_time_to_response_sd;
        std::vector<double> max_time_to_response;
        int N_all;
public:
    model_IndependentMixtureCureRateModel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_IndependentMixtureCureRateModel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_IndependentMixtureCureRateModel_namespace::model_IndependentMixtureCureRateModel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "M_groups", "int", context__.to_vec());
            M_groups = int(0);
            vals_i__ = context__.vals_i("M_groups");
            pos__ = 0;
            M_groups = vals_i__[pos__++];
            check_greater_or_equal(function__, "M_groups", M_groups, 1);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "N_A", "int", context__.to_vec());
            N_A = int(0);
            vals_i__ = context__.vals_i("N_A");
            pos__ = 0;
            N_A = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_A", N_A, 0);
            current_statement_begin__ = 34;
            context__.validate_dims("data initialization", "N_B", "int", context__.to_vec());
            N_B = int(0);
            vals_i__ = context__.vals_i("N_B");
            pos__ = 0;
            N_B = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_B", N_B, 0);
            current_statement_begin__ = 35;
            context__.validate_dims("data initialization", "N_C", "int", context__.to_vec());
            N_C = int(0);
            vals_i__ = context__.vals_i("N_C");
            pos__ = 0;
            N_C = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_C", N_C, 0);
            current_statement_begin__ = 36;
            context__.validate_dims("data initialization", "N_D", "int", context__.to_vec());
            N_D = int(0);
            vals_i__ = context__.vals_i("N_D");
            pos__ = 0;
            N_D = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_D", N_D, 0);
            current_statement_begin__ = 38;
            validate_non_negative_index("group_id_A", "N_A", N_A);
            context__.validate_dims("data initialization", "group_id_A", "int", context__.to_vec(N_A));
            group_id_A = std::vector<int>(N_A, int(0));
            vals_i__ = context__.vals_i("group_id_A");
            pos__ = 0;
            size_t group_id_A_k_0_max__ = N_A;
            for (size_t k_0__ = 0; k_0__ < group_id_A_k_0_max__; ++k_0__) {
                group_id_A[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_A_i_0_max__ = N_A;
            for (size_t i_0__ = 0; i_0__ < group_id_A_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_A[i_0__]", group_id_A[i_0__], 1);
            }
            current_statement_begin__ = 39;
            validate_non_negative_index("group_id_B", "N_B", N_B);
            context__.validate_dims("data initialization", "group_id_B", "int", context__.to_vec(N_B));
            group_id_B = std::vector<int>(N_B, int(0));
            vals_i__ = context__.vals_i("group_id_B");
            pos__ = 0;
            size_t group_id_B_k_0_max__ = N_B;
            for (size_t k_0__ = 0; k_0__ < group_id_B_k_0_max__; ++k_0__) {
                group_id_B[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_B_i_0_max__ = N_B;
            for (size_t i_0__ = 0; i_0__ < group_id_B_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_B[i_0__]", group_id_B[i_0__], 1);
            }
            current_statement_begin__ = 40;
            validate_non_negative_index("group_id_C", "N_C", N_C);
            context__.validate_dims("data initialization", "group_id_C", "int", context__.to_vec(N_C));
            group_id_C = std::vector<int>(N_C, int(0));
            vals_i__ = context__.vals_i("group_id_C");
            pos__ = 0;
            size_t group_id_C_k_0_max__ = N_C;
            for (size_t k_0__ = 0; k_0__ < group_id_C_k_0_max__; ++k_0__) {
                group_id_C[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_C_i_0_max__ = N_C;
            for (size_t i_0__ = 0; i_0__ < group_id_C_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_C[i_0__]", group_id_C[i_0__], 1);
            }
            current_statement_begin__ = 41;
            validate_non_negative_index("group_id_D", "N_D", N_D);
            context__.validate_dims("data initialization", "group_id_D", "int", context__.to_vec(N_D));
            group_id_D = std::vector<int>(N_D, int(0));
            vals_i__ = context__.vals_i("group_id_D");
            pos__ = 0;
            size_t group_id_D_k_0_max__ = N_D;
            for (size_t k_0__ = 0; k_0__ < group_id_D_k_0_max__; ++k_0__) {
                group_id_D[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_D_i_0_max__ = N_D;
            for (size_t i_0__ = 0; i_0__ < group_id_D_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_D[i_0__]", group_id_D[i_0__], 1);
            }
            current_statement_begin__ = 43;
            validate_non_negative_index("subject_id_A", "N_A", N_A);
            context__.validate_dims("data initialization", "subject_id_A", "int", context__.to_vec(N_A));
            subject_id_A = std::vector<int>(N_A, int(0));
            vals_i__ = context__.vals_i("subject_id_A");
            pos__ = 0;
            size_t subject_id_A_k_0_max__ = N_A;
            for (size_t k_0__ = 0; k_0__ < subject_id_A_k_0_max__; ++k_0__) {
                subject_id_A[k_0__] = vals_i__[pos__++];
            }
            size_t subject_id_A_i_0_max__ = N_A;
            for (size_t i_0__ = 0; i_0__ < subject_id_A_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_id_A[i_0__]", subject_id_A[i_0__], 1);
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("subject_id_B", "N_B", N_B);
            context__.validate_dims("data initialization", "subject_id_B", "int", context__.to_vec(N_B));
            subject_id_B = std::vector<int>(N_B, int(0));
            vals_i__ = context__.vals_i("subject_id_B");
            pos__ = 0;
            size_t subject_id_B_k_0_max__ = N_B;
            for (size_t k_0__ = 0; k_0__ < subject_id_B_k_0_max__; ++k_0__) {
                subject_id_B[k_0__] = vals_i__[pos__++];
            }
            size_t subject_id_B_i_0_max__ = N_B;
            for (size_t i_0__ = 0; i_0__ < subject_id_B_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_id_B[i_0__]", subject_id_B[i_0__], 1);
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("subject_id_C", "N_C", N_C);
            context__.validate_dims("data initialization", "subject_id_C", "int", context__.to_vec(N_C));
            subject_id_C = std::vector<int>(N_C, int(0));
            vals_i__ = context__.vals_i("subject_id_C");
            pos__ = 0;
            size_t subject_id_C_k_0_max__ = N_C;
            for (size_t k_0__ = 0; k_0__ < subject_id_C_k_0_max__; ++k_0__) {
                subject_id_C[k_0__] = vals_i__[pos__++];
            }
            size_t subject_id_C_i_0_max__ = N_C;
            for (size_t i_0__ = 0; i_0__ < subject_id_C_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_id_C[i_0__]", subject_id_C[i_0__], 1);
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("subject_id_D", "N_D", N_D);
            context__.validate_dims("data initialization", "subject_id_D", "int", context__.to_vec(N_D));
            subject_id_D = std::vector<int>(N_D, int(0));
            vals_i__ = context__.vals_i("subject_id_D");
            pos__ = 0;
            size_t subject_id_D_k_0_max__ = N_D;
            for (size_t k_0__ = 0; k_0__ < subject_id_D_k_0_max__; ++k_0__) {
                subject_id_D[k_0__] = vals_i__[pos__++];
            }
            size_t subject_id_D_i_0_max__ = N_D;
            for (size_t i_0__ = 0; i_0__ < subject_id_D_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_id_D[i_0__]", subject_id_D[i_0__], 1);
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("dt1_A", "N_A", N_A);
            context__.validate_dims("data initialization", "dt1_A", "double", context__.to_vec(N_A));
            dt1_A = std::vector<double>(N_A, double(0));
            vals_r__ = context__.vals_r("dt1_A");
            pos__ = 0;
            size_t dt1_A_k_0_max__ = N_A;
            for (size_t k_0__ = 0; k_0__ < dt1_A_k_0_max__; ++k_0__) {
                dt1_A[k_0__] = vals_r__[pos__++];
            }
            size_t dt1_A_i_0_max__ = N_A;
            for (size_t i_0__ = 0; i_0__ < dt1_A_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt1_A[i_0__]", dt1_A[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("dt2_A", "N_A", N_A);
            context__.validate_dims("data initialization", "dt2_A", "double", context__.to_vec(N_A));
            dt2_A = std::vector<double>(N_A, double(0));
            vals_r__ = context__.vals_r("dt2_A");
            pos__ = 0;
            size_t dt2_A_k_0_max__ = N_A;
            for (size_t k_0__ = 0; k_0__ < dt2_A_k_0_max__; ++k_0__) {
                dt2_A[k_0__] = vals_r__[pos__++];
            }
            size_t dt2_A_i_0_max__ = N_A;
            for (size_t i_0__ = 0; i_0__ < dt2_A_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt2_A[i_0__]", dt2_A[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 50;
            validate_non_negative_index("dt1_B", "N_B", N_B);
            context__.validate_dims("data initialization", "dt1_B", "double", context__.to_vec(N_B));
            dt1_B = std::vector<double>(N_B, double(0));
            vals_r__ = context__.vals_r("dt1_B");
            pos__ = 0;
            size_t dt1_B_k_0_max__ = N_B;
            for (size_t k_0__ = 0; k_0__ < dt1_B_k_0_max__; ++k_0__) {
                dt1_B[k_0__] = vals_r__[pos__++];
            }
            size_t dt1_B_i_0_max__ = N_B;
            for (size_t i_0__ = 0; i_0__ < dt1_B_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt1_B[i_0__]", dt1_B[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 53;
            validate_non_negative_index("visit_spacing", "M_groups", M_groups);
            context__.validate_dims("data initialization", "visit_spacing", "double", context__.to_vec(M_groups));
            visit_spacing = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("visit_spacing");
            pos__ = 0;
            size_t visit_spacing_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < visit_spacing_k_0_max__; ++k_0__) {
                visit_spacing[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 55;
            validate_non_negative_index("logodds_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_mean", "double", context__.to_vec(M_groups));
            logodds_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_mean");
            pos__ = 0;
            size_t logodds_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_mean_k_0_max__; ++k_0__) {
                logodds_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 56;
            validate_non_negative_index("logodds_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_sd", "double", context__.to_vec(M_groups));
            logodds_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_sd");
            pos__ = 0;
            size_t logodds_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_sd_k_0_max__; ++k_0__) {
                logodds_sd[k_0__] = vals_r__[pos__++];
            }
            size_t logodds_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < logodds_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "logodds_sd[i_0__]", logodds_sd[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 57;
            validate_non_negative_index("logodds_min", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_min", "double", context__.to_vec(M_groups));
            logodds_min = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_min");
            pos__ = 0;
            size_t logodds_min_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_min_k_0_max__; ++k_0__) {
                logodds_min[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 58;
            validate_non_negative_index("logodds_max", "M_groups", M_groups);
            context__.validate_dims("data initialization", "logodds_max", "double", context__.to_vec(M_groups));
            logodds_max = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("logodds_max");
            pos__ = 0;
            size_t logodds_max_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < logodds_max_k_0_max__; ++k_0__) {
                logodds_max[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 60;
            validate_non_negative_index("shape_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "shape_mean", "double", context__.to_vec(M_groups));
            shape_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("shape_mean");
            pos__ = 0;
            size_t shape_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < shape_mean_k_0_max__; ++k_0__) {
                shape_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 61;
            validate_non_negative_index("shape_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "shape_sd", "double", context__.to_vec(M_groups));
            shape_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("shape_sd");
            pos__ = 0;
            size_t shape_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < shape_sd_k_0_max__; ++k_0__) {
                shape_sd[k_0__] = vals_r__[pos__++];
            }
            size_t shape_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < shape_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "shape_sd[i_0__]", shape_sd[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 63;
            validate_non_negative_index("median_time_to_response_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "median_time_to_response_mean", "double", context__.to_vec(M_groups));
            median_time_to_response_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("median_time_to_response_mean");
            pos__ = 0;
            size_t median_time_to_response_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < median_time_to_response_mean_k_0_max__; ++k_0__) {
                median_time_to_response_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 64;
            validate_non_negative_index("median_time_to_response_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "median_time_to_response_sd", "double", context__.to_vec(M_groups));
            median_time_to_response_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("median_time_to_response_sd");
            pos__ = 0;
            size_t median_time_to_response_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < median_time_to_response_sd_k_0_max__; ++k_0__) {
                median_time_to_response_sd[k_0__] = vals_r__[pos__++];
            }
            size_t median_time_to_response_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < median_time_to_response_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "median_time_to_response_sd[i_0__]", median_time_to_response_sd[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 66;
            validate_non_negative_index("max_time_to_response", "M_groups", M_groups);
            context__.validate_dims("data initialization", "max_time_to_response", "double", context__.to_vec(M_groups));
            max_time_to_response = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("max_time_to_response");
            pos__ = 0;
            size_t max_time_to_response_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < max_time_to_response_k_0_max__; ++k_0__) {
                max_time_to_response[k_0__] = vals_r__[pos__++];
            }
            // initialize transformed data variables
            current_statement_begin__ = 73;
            N_all = int(0);
            stan::math::fill(N_all, std::numeric_limits<int>::min());
            stan::math::assign(N_all,(((N_A + N_B) + N_C) + N_D));
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 81;
            validate_non_negative_index("logodds", "M_groups", M_groups);
            num_params_r__ += (1 * M_groups);
            current_statement_begin__ = 82;
            validate_non_negative_index("shape", "M_groups", M_groups);
            num_params_r__ += (1 * M_groups);
            current_statement_begin__ = 83;
            validate_non_negative_index("median_time_to_response", "M_groups", M_groups);
            num_params_r__ += (1 * M_groups);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_IndependentMixtureCureRateModel() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 81;
        if (!(context__.contains_r("logodds")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logodds missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logodds");
        pos__ = 0U;
        validate_non_negative_index("logodds", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "logodds", "double", context__.to_vec(M_groups));
        std::vector<double> logodds(M_groups, double(0));
        size_t logodds_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < logodds_k_0_max__; ++k_0__) {
            logodds[k_0__] = vals_r__[pos__++];
        }
        size_t logodds_i_0_max__ = M_groups;
        for (size_t i_0__ = 0; i_0__ < logodds_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(logodds[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logodds: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 82;
        if (!(context__.contains_r("shape")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable shape missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("shape");
        pos__ = 0U;
        validate_non_negative_index("shape", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "shape", "double", context__.to_vec(M_groups));
        std::vector<double> shape(M_groups, double(0));
        size_t shape_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
            shape[k_0__] = vals_r__[pos__++];
        }
        size_t shape_i_0_max__ = M_groups;
        for (size_t i_0__ = 0; i_0__ < shape_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain((1 - stan::math::machine_precision()), 99, shape[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable shape: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 83;
        if (!(context__.contains_r("median_time_to_response")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable median_time_to_response missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("median_time_to_response");
        pos__ = 0U;
        validate_non_negative_index("median_time_to_response", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "median_time_to_response", "double", context__.to_vec(M_groups));
        std::vector<double> median_time_to_response(M_groups, double(0));
        size_t median_time_to_response_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < median_time_to_response_k_0_max__; ++k_0__) {
            median_time_to_response[k_0__] = vals_r__[pos__++];
        }
        size_t median_time_to_response_i_0_max__ = M_groups;
        for (size_t i_0__ = 0; i_0__ < median_time_to_response_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain((1.0 / 30.0), 99, median_time_to_response[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable median_time_to_response: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 81;
            std::vector<local_scalar_t__> logodds;
            size_t logodds_d_0_max__ = M_groups;
            logodds.reserve(logodds_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < logodds_d_0_max__; ++d_0__) {
                if (jacobian__)
                    logodds.push_back(in__.scalar_constrain(lp__));
                else
                    logodds.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 82;
            std::vector<local_scalar_t__> shape;
            size_t shape_d_0_max__ = M_groups;
            shape.reserve(shape_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < shape_d_0_max__; ++d_0__) {
                if (jacobian__)
                    shape.push_back(in__.scalar_lub_constrain((1 - stan::math::machine_precision()), 99, lp__));
                else
                    shape.push_back(in__.scalar_lub_constrain((1 - stan::math::machine_precision()), 99));
            }
            current_statement_begin__ = 83;
            std::vector<local_scalar_t__> median_time_to_response;
            size_t median_time_to_response_d_0_max__ = M_groups;
            median_time_to_response.reserve(median_time_to_response_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < median_time_to_response_d_0_max__; ++d_0__) {
                if (jacobian__)
                    median_time_to_response.push_back(in__.scalar_lub_constrain((1.0 / 30.0), 99, lp__));
                else
                    median_time_to_response.push_back(in__.scalar_lub_constrain((1.0 / 30.0), 99));
            }
            // transformed parameters
            current_statement_begin__ = 91;
            validate_non_negative_index("p", "M_groups", M_groups);
            std::vector<local_scalar_t__> p(M_groups, local_scalar_t__(0));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("scale", "M_groups", M_groups);
            std::vector<local_scalar_t__> scale(M_groups, local_scalar_t__(0));
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 94;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 95;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (1 / (1 + stan::math::exp(-(get_base1(logodds, g, "logodds", 1))))), 
                            "assigning variable p");
                current_statement_begin__ = 96;
                stan::model::assign(scale, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (get_base1(median_time_to_response, g, "median_time_to_response", 1) / pow(stan::math::log(2), (1 / get_base1(shape, g, "shape", 1)))), 
                            "assigning variable scale");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 91;
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(p[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t p_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < p_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "p[i_0__]", p[i_0__], 0);
                check_less_or_equal(function__, "p[i_0__]", p[i_0__], 1);
            }
            current_statement_begin__ = 92;
            size_t scale_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(scale[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: scale" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable scale: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t scale_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < scale_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "scale[i_0__]", scale[i_0__], stan::math::machine_precision());
            }
            // model body
            {
            current_statement_begin__ = 105;
            int group_id(0);
            (void) group_id;  // dummy to suppress unused var warning
            stan::math::fill(group_id, std::numeric_limits<int>::min());
            current_statement_begin__ = 108;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 109;
                lp_accum__.add(normal_log<propto__>(get_base1(logodds, g, "logodds", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1)));
                if (get_base1(logodds, g, "logodds", 1) < get_base1(logodds_min, g, "logodds_min", 1)) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(logodds, g, "logodds", 1) > get_base1(logodds_max, g, "logodds_max", 1)) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(get_base1(logodds_max, g, "logodds_max", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1)), normal_cdf_log(get_base1(logodds_min, g, "logodds_min", 1), get_base1(logodds_mean, g, "logodds_mean", 1), get_base1(logodds_sd, g, "logodds_sd", 1))));
                current_statement_begin__ = 110;
                lp_accum__.add(normal_log<propto__>(get_base1(shape, g, "shape", 1), get_base1(shape_mean, g, "shape_mean", 1), get_base1(shape_sd, g, "shape_sd", 1)));
                if (get_base1(shape, g, "shape", 1) < (1 - stan::math::machine_precision())) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(shape, g, "shape", 1) > 99) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(99, get_base1(shape_mean, g, "shape_mean", 1), get_base1(shape_sd, g, "shape_sd", 1)), normal_cdf_log((1 - stan::math::machine_precision()), get_base1(shape_mean, g, "shape_mean", 1), get_base1(shape_sd, g, "shape_sd", 1))));
                current_statement_begin__ = 111;
                lp_accum__.add(normal_log<propto__>(get_base1(median_time_to_response, g, "median_time_to_response", 1), get_base1(median_time_to_response_mean, g, "median_time_to_response_mean", 1), get_base1(median_time_to_response_sd, g, "median_time_to_response_sd", 1)));
                if (get_base1(median_time_to_response, g, "median_time_to_response", 1) < stan::math::machine_precision()) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(median_time_to_response, g, "median_time_to_response", 1) > 99) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(99, get_base1(median_time_to_response_mean, g, "median_time_to_response_mean", 1), get_base1(median_time_to_response_sd, g, "median_time_to_response_sd", 1)), normal_cdf_log(stan::math::machine_precision(), get_base1(median_time_to_response_mean, g, "median_time_to_response_mean", 1), get_base1(median_time_to_response_sd, g, "median_time_to_response_sd", 1))));
            }
            current_statement_begin__ = 115;
            for (int i = 1; i <= N_C; ++i) {
                current_statement_begin__ = 116;
                stan::math::assign(group_id, get_base1(group_id_C, i, "group_id_C", 1));
                current_statement_begin__ = 117;
                lp_accum__.add(stan::math::log((1 - get_base1(p, group_id, "p", 1))));
            }
            current_statement_begin__ = 121;
            for (int i = 1; i <= N_A; ++i) {
                current_statement_begin__ = 122;
                stan::math::assign(group_id, get_base1(group_id_A, i, "group_id_A", 1));
                current_statement_begin__ = 123;
                lp_accum__.add(stan::math::log((get_base1(p, group_id, "p", 1) * (weibull_cdf(get_base1(dt2_A, i, "dt2_A", 1), get_base1(shape, group_id, "shape", 1), get_base1(scale, group_id, "scale", 1)) - weibull_cdf(get_base1(dt1_A, i, "dt1_A", 1), get_base1(shape, group_id, "shape", 1), get_base1(scale, group_id, "scale", 1))))));
            }
            current_statement_begin__ = 131;
            for (int i = 1; i <= N_B; ++i) {
                current_statement_begin__ = 132;
                stan::math::assign(group_id, get_base1(group_id_B, i, "group_id_B", 1));
                current_statement_begin__ = 133;
                lp_accum__.add(stan::math::log(((1 - get_base1(p, group_id, "p", 1)) + (get_base1(p, group_id, "p", 1) * (1 - weibull_cdf(get_base1(dt1_B, i, "dt1_B", 1), get_base1(shape, group_id, "shape", 1), get_base1(scale, group_id, "scale", 1)))))));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("logodds");
        names__.push_back("shape");
        names__.push_back("median_time_to_response");
        names__.push_back("p");
        names__.push_back("scale");
        names__.push_back("group_id");
        names__.push_back("subject_id");
        names__.push_back("gg");
        names__.push_back("dt");
        names__.push_back("dt1");
        names__.push_back("dt2");
        names__.push_back("p_cond");
        names__.push_back("S_t");
        names__.push_back("offset");
        names__.push_back("idx");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_all);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_IndependentMixtureCureRateModel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> logodds;
        size_t logodds_d_0_max__ = M_groups;
        logodds.reserve(logodds_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < logodds_d_0_max__; ++d_0__) {
            logodds.push_back(in__.scalar_constrain());
        }
        size_t logodds_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < logodds_k_0_max__; ++k_0__) {
            vars__.push_back(logodds[k_0__]);
        }
        std::vector<double> shape;
        size_t shape_d_0_max__ = M_groups;
        shape.reserve(shape_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < shape_d_0_max__; ++d_0__) {
            shape.push_back(in__.scalar_lub_constrain((1 - stan::math::machine_precision()), 99));
        }
        size_t shape_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
            vars__.push_back(shape[k_0__]);
        }
        std::vector<double> median_time_to_response;
        size_t median_time_to_response_d_0_max__ = M_groups;
        median_time_to_response.reserve(median_time_to_response_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < median_time_to_response_d_0_max__; ++d_0__) {
            median_time_to_response.push_back(in__.scalar_lub_constrain((1.0 / 30.0), 99));
        }
        size_t median_time_to_response_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < median_time_to_response_k_0_max__; ++k_0__) {
            vars__.push_back(median_time_to_response[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 91;
            validate_non_negative_index("p", "M_groups", M_groups);
            std::vector<double> p(M_groups, double(0));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("scale", "M_groups", M_groups);
            std::vector<double> scale(M_groups, double(0));
            stan::math::initialize(scale, DUMMY_VAR__);
            stan::math::fill(scale, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 94;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 95;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (1 / (1 + stan::math::exp(-(get_base1(logodds, g, "logodds", 1))))), 
                            "assigning variable p");
                current_statement_begin__ = 96;
                stan::model::assign(scale, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (get_base1(median_time_to_response, g, "median_time_to_response", 1) / pow(stan::math::log(2), (1 / get_base1(shape, g, "shape", 1)))), 
                            "assigning variable scale");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 91;
            size_t p_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < p_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "p[i_0__]", p[i_0__], 0);
                check_less_or_equal(function__, "p[i_0__]", p[i_0__], 1);
            }
            current_statement_begin__ = 92;
            size_t scale_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < scale_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "scale[i_0__]", scale[i_0__], stan::math::machine_precision());
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t p_k_0_max__ = M_groups;
                for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                    vars__.push_back(p[k_0__]);
                }
                size_t scale_k_0_max__ = M_groups;
                for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                    vars__.push_back(scale[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 144;
            validate_non_negative_index("group_id", "N_all", N_all);
            std::vector<int> group_id(N_all, int(0));
            stan::math::fill(group_id, std::numeric_limits<int>::min());
            current_statement_begin__ = 145;
            validate_non_negative_index("subject_id", "N_all", N_all);
            std::vector<int> subject_id(N_all, int(0));
            stan::math::fill(subject_id, std::numeric_limits<int>::min());
            current_statement_begin__ = 146;
            int gg;
            (void) gg;  // dummy to suppress unused var warning
            stan::math::fill(gg, std::numeric_limits<int>::min());
            current_statement_begin__ = 147;
            validate_non_negative_index("dt", "N_all", N_all);
            std::vector<double> dt(N_all, double(0));
            stan::math::initialize(dt, DUMMY_VAR__);
            stan::math::fill(dt, DUMMY_VAR__);
            current_statement_begin__ = 148;
            validate_non_negative_index("dt1", "N_all", N_all);
            std::vector<double> dt1(N_all, double(0));
            stan::math::initialize(dt1, DUMMY_VAR__);
            stan::math::fill(dt1, DUMMY_VAR__);
            current_statement_begin__ = 149;
            validate_non_negative_index("dt2", "N_all", N_all);
            std::vector<double> dt2(N_all, double(0));
            stan::math::initialize(dt2, DUMMY_VAR__);
            stan::math::fill(dt2, DUMMY_VAR__);
            current_statement_begin__ = 151;
            double p_cond;
            (void) p_cond;  // dummy to suppress unused var warning
            stan::math::initialize(p_cond, DUMMY_VAR__);
            stan::math::fill(p_cond, DUMMY_VAR__);
            stan::math::assign(p_cond,0.0);
            current_statement_begin__ = 152;
            double S_t;
            (void) S_t;  // dummy to suppress unused var warning
            stan::math::initialize(S_t, DUMMY_VAR__);
            stan::math::fill(S_t, DUMMY_VAR__);
            stan::math::assign(S_t,0.0);
            current_statement_begin__ = 153;
            int offset;
            (void) offset;  // dummy to suppress unused var warning
            stan::math::fill(offset, std::numeric_limits<int>::min());
            stan::math::assign(offset,0);
            current_statement_begin__ = 154;
            int idx;
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            // generated quantities statements
            current_statement_begin__ = 157;
            for (int i = 1; i <= N_A; ++i) {
                current_statement_begin__ = 158;
                stan::math::assign(gg, get_base1(group_id_A, i, "group_id_A", 1));
                current_statement_begin__ = 159;
                stan::model::assign(group_id, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(group_id_A, i, "group_id_A", 1), 
                            "assigning variable group_id");
                current_statement_begin__ = 160;
                stan::model::assign(subject_id, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(subject_id_A, i, "subject_id_A", 1), 
                            "assigning variable subject_id");
                current_statement_begin__ = 161;
                stan::model::assign(dt, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            ttweibull_rng(get_base1(shape, gg, "shape", 1), get_base1(scale, gg, "scale", 1), get_base1(dt1_A, i, "dt1_A", 1), get_base1(dt2_A, i, "dt2_A", 1), base_rng__, pstream__), 
                            "assigning variable dt");
                current_statement_begin__ = 162;
                stan::model::assign(dt1, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(dt1_A, i, "dt1_A", 1), 
                            "assigning variable dt1");
                current_statement_begin__ = 163;
                stan::model::assign(dt2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(dt2_A, i, "dt2_A", 1), 
                            "assigning variable dt2");
            }
            current_statement_begin__ = 165;
            stan::math::assign(offset, N_A);
            current_statement_begin__ = 168;
            for (int i = 1; i <= N_B; ++i) {
                current_statement_begin__ = 169;
                stan::math::assign(gg, get_base1(group_id_B, i, "group_id_B", 1));
                current_statement_begin__ = 170;
                stan::math::assign(idx, (i + offset));
                current_statement_begin__ = 171;
                stan::model::assign(group_id, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            get_base1(group_id_B, i, "group_id_B", 1), 
                            "assigning variable group_id");
                current_statement_begin__ = 172;
                stan::model::assign(subject_id, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            get_base1(subject_id_B, i, "subject_id_B", 1), 
                            "assigning variable subject_id");
                current_statement_begin__ = 174;
                stan::math::assign(S_t, (1 - weibull_cdf(get_base1(dt1_B, i, "dt1_B", 1), get_base1(shape, gg, "shape", 1), get_base1(scale, gg, "scale", 1))));
                current_statement_begin__ = 175;
                stan::math::assign(p_cond, ((S_t * get_base1(p, gg, "p", 1)) / ((1 - get_base1(p, gg, "p", 1)) + (get_base1(p, gg, "p", 1) * S_t))));
                current_statement_begin__ = 176;
                if (as_bool(logical_eq(bernoulli_rng(p_cond, base_rng__), 1))) {
                    current_statement_begin__ = 178;
                    stan::model::assign(dt, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                ttweibull_rng(get_base1(shape, gg, "shape", 1), get_base1(scale, gg, "scale", 1), get_base1(dt1_B, i, "dt1_B", 1), get_base1(max_time_to_response, gg, "max_time_to_response", 1), base_rng__, pstream__), 
                                "assigning variable dt");
                    current_statement_begin__ = 180;
                    stan::model::assign(dt1, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable dt1");
                    current_statement_begin__ = 181;
                    while (as_bool(logical_lt((get_base1(dt1, idx, "dt1", 1) + get_base1(visit_spacing, gg, "visit_spacing", 1)), get_base1(dt, idx, "dt", 1)))) {
                        current_statement_begin__ = 182;
                        stan::model::assign(dt1, 
                                    stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(dt1, stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), "dt1") + get_base1(visit_spacing, gg, "visit_spacing", 1)), 
                                    "assigning variable dt1");
                    }
                    current_statement_begin__ = 184;
                    stan::model::assign(dt2, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                (get_base1(dt1, idx, "dt1", 1) + get_base1(visit_spacing, gg, "visit_spacing", 1)), 
                                "assigning variable dt2");
                } else {
                    current_statement_begin__ = 186;
                    stan::model::assign(dt, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                stan::math::positive_infinity(), 
                                "assigning variable dt");
                    current_statement_begin__ = 187;
                    stan::model::assign(dt1, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                stan::math::positive_infinity(), 
                                "assigning variable dt1");
                    current_statement_begin__ = 188;
                    stan::model::assign(dt2, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                stan::math::positive_infinity(), 
                                "assigning variable dt2");
                }
            }
            current_statement_begin__ = 191;
            stan::math::assign(offset, (offset + N_B));
            current_statement_begin__ = 194;
            for (int i = 1; i <= N_C; ++i) {
                current_statement_begin__ = 195;
                stan::math::assign(idx, (i + offset));
                current_statement_begin__ = 196;
                stan::model::assign(group_id, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            get_base1(group_id_C, i, "group_id_C", 1), 
                            "assigning variable group_id");
                current_statement_begin__ = 197;
                stan::model::assign(subject_id, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            get_base1(subject_id_C, i, "subject_id_C", 1), 
                            "assigning variable subject_id");
                current_statement_begin__ = 198;
                stan::model::assign(dt, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            stan::math::positive_infinity(), 
                            "assigning variable dt");
                current_statement_begin__ = 199;
                stan::model::assign(dt1, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            stan::math::positive_infinity(), 
                            "assigning variable dt1");
                current_statement_begin__ = 200;
                stan::model::assign(dt2, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            stan::math::positive_infinity(), 
                            "assigning variable dt2");
            }
            current_statement_begin__ = 202;
            stan::math::assign(offset, (offset + N_C));
            current_statement_begin__ = 206;
            for (int i = 1; i <= N_D; ++i) {
                current_statement_begin__ = 207;
                stan::math::assign(gg, get_base1(group_id_D, i, "group_id_D", 1));
                current_statement_begin__ = 208;
                stan::math::assign(idx, (i + offset));
                current_statement_begin__ = 209;
                stan::model::assign(group_id, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            get_base1(group_id_D, i, "group_id_D", 1), 
                            "assigning variable group_id");
                current_statement_begin__ = 210;
                stan::model::assign(subject_id, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            get_base1(subject_id_D, i, "subject_id_D", 1), 
                            "assigning variable subject_id");
                current_statement_begin__ = 211;
                if (as_bool(logical_eq(bernoulli_rng(get_base1(p, gg, "p", 1), base_rng__), 1))) {
                    current_statement_begin__ = 213;
                    stan::model::assign(dt, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                ttweibull_rng(get_base1(shape, gg, "shape", 1), get_base1(scale, gg, "scale", 1), (1.0 / 30.0), get_base1(max_time_to_response, gg, "max_time_to_response", 1), base_rng__, pstream__), 
                                "assigning variable dt");
                    current_statement_begin__ = 215;
                    stan::model::assign(dt1, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                0, 
                                "assigning variable dt1");
                    current_statement_begin__ = 216;
                    while (as_bool(logical_lt((get_base1(dt1, idx, "dt1", 1) + get_base1(visit_spacing, gg, "visit_spacing", 1)), get_base1(dt, idx, "dt", 1)))) {
                        current_statement_begin__ = 217;
                        stan::model::assign(dt1, 
                                    stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(dt1, stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), "dt1") + get_base1(visit_spacing, gg, "visit_spacing", 1)), 
                                    "assigning variable dt1");
                    }
                    current_statement_begin__ = 219;
                    stan::model::assign(dt2, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                (get_base1(dt1, idx, "dt1", 1) + get_base1(visit_spacing, gg, "visit_spacing", 1)), 
                                "assigning variable dt2");
                } else {
                    current_statement_begin__ = 221;
                    stan::model::assign(dt, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                stan::math::positive_infinity(), 
                                "assigning variable dt");
                    current_statement_begin__ = 222;
                    stan::model::assign(dt1, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                stan::math::positive_infinity(), 
                                "assigning variable dt1");
                    current_statement_begin__ = 223;
                    stan::model::assign(dt2, 
                                stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                                stan::math::positive_infinity(), 
                                "assigning variable dt2");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 144;
            size_t group_id_i_0_max__ = N_all;
            for (size_t i_0__ = 0; i_0__ < group_id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id[i_0__]", group_id[i_0__], 1);
            }
            size_t group_id_k_0_max__ = N_all;
            for (size_t k_0__ = 0; k_0__ < group_id_k_0_max__; ++k_0__) {
                vars__.push_back(group_id[k_0__]);
            }
            current_statement_begin__ = 145;
            size_t subject_id_i_0_max__ = N_all;
            for (size_t i_0__ = 0; i_0__ < subject_id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_id[i_0__]", subject_id[i_0__], 1);
            }
            size_t subject_id_k_0_max__ = N_all;
            for (size_t k_0__ = 0; k_0__ < subject_id_k_0_max__; ++k_0__) {
                vars__.push_back(subject_id[k_0__]);
            }
            current_statement_begin__ = 146;
            check_greater_or_equal(function__, "gg", gg, 1);
            vars__.push_back(gg);
            current_statement_begin__ = 147;
            size_t dt_i_0_max__ = N_all;
            for (size_t i_0__ = 0; i_0__ < dt_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt[i_0__]", dt[i_0__], 0);
            }
            size_t dt_k_0_max__ = N_all;
            for (size_t k_0__ = 0; k_0__ < dt_k_0_max__; ++k_0__) {
                vars__.push_back(dt[k_0__]);
            }
            current_statement_begin__ = 148;
            size_t dt1_i_0_max__ = N_all;
            for (size_t i_0__ = 0; i_0__ < dt1_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt1[i_0__]", dt1[i_0__], 0);
            }
            size_t dt1_k_0_max__ = N_all;
            for (size_t k_0__ = 0; k_0__ < dt1_k_0_max__; ++k_0__) {
                vars__.push_back(dt1[k_0__]);
            }
            current_statement_begin__ = 149;
            size_t dt2_i_0_max__ = N_all;
            for (size_t i_0__ = 0; i_0__ < dt2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt2[i_0__]", dt2[i_0__], 0);
            }
            size_t dt2_k_0_max__ = N_all;
            for (size_t k_0__ = 0; k_0__ < dt2_k_0_max__; ++k_0__) {
                vars__.push_back(dt2[k_0__]);
            }
            current_statement_begin__ = 151;
            vars__.push_back(p_cond);
            current_statement_begin__ = 152;
            vars__.push_back(S_t);
            current_statement_begin__ = 153;
            vars__.push_back(offset);
            current_statement_begin__ = 154;
            vars__.push_back(idx);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_IndependentMixtureCureRateModel";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t logodds_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < logodds_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logodds" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t shape_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t median_time_to_response_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < median_time_to_response_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "median_time_to_response" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t scale_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "scale" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t group_id_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < group_id_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "group_id" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t subject_id_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < subject_id_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "subject_id" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gg";
        param_names__.push_back(param_name_stream__.str());
        size_t dt_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < dt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dt1_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < dt1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dt2_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < dt2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_cond";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "S_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "idx";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t logodds_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < logodds_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logodds" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t shape_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < shape_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "shape" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t median_time_to_response_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < median_time_to_response_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "median_time_to_response" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t scale_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < scale_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "scale" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t group_id_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < group_id_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "group_id" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t subject_id_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < subject_id_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "subject_id" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "gg";
        param_names__.push_back(param_name_stream__.str());
        size_t dt_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < dt_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dt1_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < dt1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t dt2_k_0_max__ = N_all;
        for (size_t k_0__ = 0; k_0__ < dt2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "p_cond";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "S_t";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "idx";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_IndependentMixtureCureRateModel_namespace::model_IndependentMixtureCureRateModel stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
