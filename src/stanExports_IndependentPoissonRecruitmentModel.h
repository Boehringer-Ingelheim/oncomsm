// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_IndependentPoissonRecruitmentModel_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_IndependentPoissonRecruitmentModel");
    reader.add_event(138, 136, "end", "model_IndependentPoissonRecruitmentModel");
    return reader;
}
template <typename T0__, typename T1__, typename T2__, class RNG>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
ttexponential_rng(const T0__& rate,
                      const T1__& t1,
                      const T2__& t2, RNG& base_rng__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 6;
        local_scalar_t__ p1(DUMMY_VAR__);
        (void) p1;  // dummy to suppress unused var warning
        stan::math::initialize(p1, DUMMY_VAR__);
        stan::math::fill(p1, DUMMY_VAR__);
        current_statement_begin__ = 7;
        local_scalar_t__ p2(DUMMY_VAR__);
        (void) p2;  // dummy to suppress unused var warning
        stan::math::initialize(p2, DUMMY_VAR__);
        stan::math::fill(p2, DUMMY_VAR__);
        current_statement_begin__ = 8;
        local_scalar_t__ u(DUMMY_VAR__);
        (void) u;  // dummy to suppress unused var warning
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        current_statement_begin__ = 9;
        local_scalar_t__ x(DUMMY_VAR__);
        (void) x;  // dummy to suppress unused var warning
        stan::math::initialize(x, DUMMY_VAR__);
        stan::math::fill(x, DUMMY_VAR__);
        current_statement_begin__ = 10;
        stan::math::assign(p1, exponential_cdf(t1, rate));
        current_statement_begin__ = 11;
        if (as_bool(logical_lt((1 - p1), 1e-4))) {
            current_statement_begin__ = 13;
            return stan::math::promote_scalar<fun_return_scalar_t__>(t1);
        }
        current_statement_begin__ = 15;
        stan::math::assign(p2, exponential_cdf(t2, rate));
        current_statement_begin__ = 16;
        if (as_bool(logical_lt((p2 - p1), 1e-4))) {
            current_statement_begin__ = 18;
            return stan::math::promote_scalar<fun_return_scalar_t__>(((t1 + t2) / 2));
        }
        current_statement_begin__ = 20;
        stan::math::assign(u, uniform_rng(p1, p2, base_rng__));
        current_statement_begin__ = 21;
        stan::math::assign(x, (-(stan::math::log((1 - u))) / rate));
        current_statement_begin__ = 22;
        return stan::math::promote_scalar<fun_return_scalar_t__>(x);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ttexponential_rng_functor__ {
    template <typename T0__, typename T1__, typename T2__, class RNG>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& rate,
                      const T1__& t1,
                      const T2__& t2, RNG& base_rng__, std::ostream* pstream__) const {
        return ttexponential_rng(rate, t1, t2, base_rng__, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_IndependentPoissonRecruitmentModel
  : public stan::model::model_base_crtp<model_IndependentPoissonRecruitmentModel> {
private:
        int M_groups;
        int N_old;
        std::vector<int> group_id_old;
        std::vector<int> subject_id_old;
        std::vector<double> t_old;
        int N_new;
        std::vector<int> group_id_new;
        std::vector<int> subject_id_new;
        double now;
        std::vector<double> log_monthly_rate_mean;
        std::vector<double> log_monthly_rate_sd;
        std::vector<double> maximal_recruitment_interval;
        int N_total;
        std::vector<int> idx_old_sorted;
        std::vector<double> dt_old_sorted;
public:
    model_IndependentPoissonRecruitmentModel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_IndependentPoissonRecruitmentModel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_IndependentPoissonRecruitmentModel_namespace::model_IndependentPoissonRecruitmentModel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 31;
            context__.validate_dims("data initialization", "M_groups", "int", context__.to_vec());
            M_groups = int(0);
            vals_i__ = context__.vals_i("M_groups");
            pos__ = 0;
            M_groups = vals_i__[pos__++];
            check_greater_or_equal(function__, "M_groups", M_groups, 1);
            current_statement_begin__ = 33;
            context__.validate_dims("data initialization", "N_old", "int", context__.to_vec());
            N_old = int(0);
            vals_i__ = context__.vals_i("N_old");
            pos__ = 0;
            N_old = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_old", N_old, 0);
            current_statement_begin__ = 34;
            validate_non_negative_index("group_id_old", "N_old", N_old);
            context__.validate_dims("data initialization", "group_id_old", "int", context__.to_vec(N_old));
            group_id_old = std::vector<int>(N_old, int(0));
            vals_i__ = context__.vals_i("group_id_old");
            pos__ = 0;
            size_t group_id_old_k_0_max__ = N_old;
            for (size_t k_0__ = 0; k_0__ < group_id_old_k_0_max__; ++k_0__) {
                group_id_old[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_old_i_0_max__ = N_old;
            for (size_t i_0__ = 0; i_0__ < group_id_old_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_old[i_0__]", group_id_old[i_0__], 1);
            }
            current_statement_begin__ = 35;
            validate_non_negative_index("subject_id_old", "N_old", N_old);
            context__.validate_dims("data initialization", "subject_id_old", "int", context__.to_vec(N_old));
            subject_id_old = std::vector<int>(N_old, int(0));
            vals_i__ = context__.vals_i("subject_id_old");
            pos__ = 0;
            size_t subject_id_old_k_0_max__ = N_old;
            for (size_t k_0__ = 0; k_0__ < subject_id_old_k_0_max__; ++k_0__) {
                subject_id_old[k_0__] = vals_i__[pos__++];
            }
            size_t subject_id_old_i_0_max__ = N_old;
            for (size_t i_0__ = 0; i_0__ < subject_id_old_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_id_old[i_0__]", subject_id_old[i_0__], 1);
            }
            current_statement_begin__ = 36;
            validate_non_negative_index("t_old", "N_old", N_old);
            context__.validate_dims("data initialization", "t_old", "double", context__.to_vec(N_old));
            t_old = std::vector<double>(N_old, double(0));
            vals_r__ = context__.vals_r("t_old");
            pos__ = 0;
            size_t t_old_k_0_max__ = N_old;
            for (size_t k_0__ = 0; k_0__ < t_old_k_0_max__; ++k_0__) {
                t_old[k_0__] = vals_r__[pos__++];
            }
            size_t t_old_i_0_max__ = N_old;
            for (size_t i_0__ = 0; i_0__ < t_old_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_old[i_0__]", t_old[i_0__], 0);
            }
            current_statement_begin__ = 37;
            context__.validate_dims("data initialization", "N_new", "int", context__.to_vec());
            N_new = int(0);
            vals_i__ = context__.vals_i("N_new");
            pos__ = 0;
            N_new = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_new", N_new, 0);
            current_statement_begin__ = 38;
            validate_non_negative_index("group_id_new", "N_new", N_new);
            context__.validate_dims("data initialization", "group_id_new", "int", context__.to_vec(N_new));
            group_id_new = std::vector<int>(N_new, int(0));
            vals_i__ = context__.vals_i("group_id_new");
            pos__ = 0;
            size_t group_id_new_k_0_max__ = N_new;
            for (size_t k_0__ = 0; k_0__ < group_id_new_k_0_max__; ++k_0__) {
                group_id_new[k_0__] = vals_i__[pos__++];
            }
            size_t group_id_new_i_0_max__ = N_new;
            for (size_t i_0__ = 0; i_0__ < group_id_new_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id_new[i_0__]", group_id_new[i_0__], 1);
            }
            current_statement_begin__ = 39;
            validate_non_negative_index("subject_id_new", "N_new", N_new);
            context__.validate_dims("data initialization", "subject_id_new", "int", context__.to_vec(N_new));
            subject_id_new = std::vector<int>(N_new, int(0));
            vals_i__ = context__.vals_i("subject_id_new");
            pos__ = 0;
            size_t subject_id_new_k_0_max__ = N_new;
            for (size_t k_0__ = 0; k_0__ < subject_id_new_k_0_max__; ++k_0__) {
                subject_id_new[k_0__] = vals_i__[pos__++];
            }
            size_t subject_id_new_i_0_max__ = N_new;
            for (size_t i_0__ = 0; i_0__ < subject_id_new_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_id_new[i_0__]", subject_id_new[i_0__], 1);
            }
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "now", "double", context__.to_vec());
            now = double(0);
            vals_r__ = context__.vals_r("now");
            pos__ = 0;
            now = vals_r__[pos__++];
            check_greater_or_equal(function__, "now", now, 0);
            current_statement_begin__ = 44;
            validate_non_negative_index("log_monthly_rate_mean", "M_groups", M_groups);
            context__.validate_dims("data initialization", "log_monthly_rate_mean", "double", context__.to_vec(M_groups));
            log_monthly_rate_mean = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("log_monthly_rate_mean");
            pos__ = 0;
            size_t log_monthly_rate_mean_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < log_monthly_rate_mean_k_0_max__; ++k_0__) {
                log_monthly_rate_mean[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("log_monthly_rate_sd", "M_groups", M_groups);
            context__.validate_dims("data initialization", "log_monthly_rate_sd", "double", context__.to_vec(M_groups));
            log_monthly_rate_sd = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("log_monthly_rate_sd");
            pos__ = 0;
            size_t log_monthly_rate_sd_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < log_monthly_rate_sd_k_0_max__; ++k_0__) {
                log_monthly_rate_sd[k_0__] = vals_r__[pos__++];
            }
            size_t log_monthly_rate_sd_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < log_monthly_rate_sd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "log_monthly_rate_sd[i_0__]", log_monthly_rate_sd[i_0__], stan::math::machine_precision());
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("maximal_recruitment_interval", "M_groups", M_groups);
            context__.validate_dims("data initialization", "maximal_recruitment_interval", "double", context__.to_vec(M_groups));
            maximal_recruitment_interval = std::vector<double>(M_groups, double(0));
            vals_r__ = context__.vals_r("maximal_recruitment_interval");
            pos__ = 0;
            size_t maximal_recruitment_interval_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < maximal_recruitment_interval_k_0_max__; ++k_0__) {
                maximal_recruitment_interval[k_0__] = vals_r__[pos__++];
            }
            size_t maximal_recruitment_interval_i_0_max__ = M_groups;
            for (size_t i_0__ = 0; i_0__ < maximal_recruitment_interval_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "maximal_recruitment_interval[i_0__]", maximal_recruitment_interval[i_0__], stan::math::machine_precision());
            }
            // initialize transformed data variables
            current_statement_begin__ = 54;
            N_total = int(0);
            stan::math::fill(N_total, std::numeric_limits<int>::min());
            stan::math::assign(N_total,(N_old + N_new));
            current_statement_begin__ = 55;
            validate_non_negative_index("idx_old_sorted", "N_old", N_old);
            idx_old_sorted = std::vector<int>(N_old, int(0));
            stan::math::fill(idx_old_sorted, std::numeric_limits<int>::min());
            stan::math::assign(idx_old_sorted,sort_indices_asc(t_old));
            current_statement_begin__ = 56;
            validate_non_negative_index("dt_old_sorted", "N_old", N_old);
            dt_old_sorted = std::vector<double>(N_old, double(0));
            stan::math::fill(dt_old_sorted, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 57;
            if (as_bool(logical_gt(N_old, 0))) {
                current_statement_begin__ = 58;
                stan::model::assign(dt_old_sorted, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable dt_old_sorted");
            }
            current_statement_begin__ = 60;
            for (int i = 2; i <= N_old; ++i) {
                current_statement_begin__ = 61;
                stan::model::assign(dt_old_sorted, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(t_old, get_base1(idx_old_sorted, i, "idx_old_sorted", 1), "t_old", 1) - get_base1(t_old, get_base1(idx_old_sorted, (i - 1), "idx_old_sorted", 1), "t_old", 1)), 
                            "assigning variable dt_old_sorted");
            }
            // validate transformed data
            current_statement_begin__ = 56;
            size_t dt_old_sorted_i_0_max__ = N_old;
            for (size_t i_0__ = 0; i_0__ < dt_old_sorted_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dt_old_sorted[i_0__]", dt_old_sorted[i_0__], 0);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 70;
            validate_non_negative_index("log_monthly_rate", "M_groups", M_groups);
            num_params_r__ += (1 * M_groups);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_IndependentPoissonRecruitmentModel() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 70;
        if (!(context__.contains_r("log_monthly_rate")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log_monthly_rate missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log_monthly_rate");
        pos__ = 0U;
        validate_non_negative_index("log_monthly_rate", "M_groups", M_groups);
        context__.validate_dims("parameter initialization", "log_monthly_rate", "double", context__.to_vec(M_groups));
        std::vector<double> log_monthly_rate(M_groups, double(0));
        size_t log_monthly_rate_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < log_monthly_rate_k_0_max__; ++k_0__) {
            log_monthly_rate[k_0__] = vals_r__[pos__++];
        }
        size_t log_monthly_rate_i_0_max__ = M_groups;
        for (size_t i_0__ = 0; i_0__ < log_monthly_rate_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(log_monthly_rate[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log_monthly_rate: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 70;
            std::vector<local_scalar_t__> log_monthly_rate;
            size_t log_monthly_rate_d_0_max__ = M_groups;
            log_monthly_rate.reserve(log_monthly_rate_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < log_monthly_rate_d_0_max__; ++d_0__) {
                if (jacobian__)
                    log_monthly_rate.push_back(in__.scalar_constrain(lp__));
                else
                    log_monthly_rate.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 78;
            validate_non_negative_index("rate", "M_groups", M_groups);
            std::vector<local_scalar_t__> rate(M_groups, local_scalar_t__(0));
            stan::math::initialize(rate, DUMMY_VAR__);
            stan::math::fill(rate, DUMMY_VAR__);
            stan::math::assign(rate,stan::math::exp(log_monthly_rate));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 78;
            size_t rate_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(rate[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: rate" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable rate: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            {
            current_statement_begin__ = 86;
            int idx(0);
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            current_statement_begin__ = 89;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 90;
                lp_accum__.add(normal_log<propto__>(get_base1(log_monthly_rate, g, "log_monthly_rate", 1), get_base1(log_monthly_rate_mean, g, "log_monthly_rate_mean", 1), get_base1(log_monthly_rate_sd, g, "log_monthly_rate_sd", 1)));
            }
            current_statement_begin__ = 94;
            for (int i = 1; i <= N_old; ++i) {
                current_statement_begin__ = 95;
                stan::math::assign(idx, get_base1(idx_old_sorted, i, "idx_old_sorted", 1));
                current_statement_begin__ = 96;
                lp_accum__.add(exponential_log<propto__>(get_base1(dt_old_sorted, i, "dt_old_sorted", 1), get_base1(rate, get_base1(group_id_old, idx, "group_id_old", 1), "rate", 1)));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("log_monthly_rate");
        names__.push_back("rate");
        names__.push_back("group_id");
        names__.push_back("subject_id");
        names__.push_back("t_recruitment");
        names__.push_back("offset");
        names__.push_back("idx");
        names__.push_back("max_wait");
        names__.push_back("t_last");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_total);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_total);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_total);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M_groups);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_IndependentPoissonRecruitmentModel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> log_monthly_rate;
        size_t log_monthly_rate_d_0_max__ = M_groups;
        log_monthly_rate.reserve(log_monthly_rate_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < log_monthly_rate_d_0_max__; ++d_0__) {
            log_monthly_rate.push_back(in__.scalar_constrain());
        }
        size_t log_monthly_rate_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < log_monthly_rate_k_0_max__; ++k_0__) {
            vars__.push_back(log_monthly_rate[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 78;
            validate_non_negative_index("rate", "M_groups", M_groups);
            std::vector<double> rate(M_groups, double(0));
            stan::math::initialize(rate, DUMMY_VAR__);
            stan::math::fill(rate, DUMMY_VAR__);
            stan::math::assign(rate,stan::math::exp(log_monthly_rate));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t rate_k_0_max__ = M_groups;
                for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                    vars__.push_back(rate[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 105;
            validate_non_negative_index("group_id", "N_total", N_total);
            std::vector<int> group_id(N_total, int(0));
            stan::math::fill(group_id, std::numeric_limits<int>::min());
            current_statement_begin__ = 106;
            validate_non_negative_index("subject_id", "N_total", N_total);
            std::vector<int> subject_id(N_total, int(0));
            stan::math::fill(subject_id, std::numeric_limits<int>::min());
            current_statement_begin__ = 107;
            validate_non_negative_index("t_recruitment", "N_total", N_total);
            std::vector<double> t_recruitment(N_total, double(0));
            stan::math::initialize(t_recruitment, DUMMY_VAR__);
            stan::math::fill(t_recruitment, DUMMY_VAR__);
            current_statement_begin__ = 108;
            int offset;
            (void) offset;  // dummy to suppress unused var warning
            stan::math::fill(offset, std::numeric_limits<int>::min());
            stan::math::assign(offset,0);
            current_statement_begin__ = 109;
            int idx;
            (void) idx;  // dummy to suppress unused var warning
            stan::math::fill(idx, std::numeric_limits<int>::min());
            stan::math::assign(idx,0);
            current_statement_begin__ = 110;
            double max_wait;
            (void) max_wait;  // dummy to suppress unused var warning
            stan::math::initialize(max_wait, DUMMY_VAR__);
            stan::math::fill(max_wait, DUMMY_VAR__);
            stan::math::assign(max_wait,0.0);
            current_statement_begin__ = 111;
            validate_non_negative_index("t_last", "M_groups", M_groups);
            std::vector<double> t_last(M_groups, double(0));
            stan::math::initialize(t_last, DUMMY_VAR__);
            stan::math::fill(t_last, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 113;
            for (int g = 1; g <= M_groups; ++g) {
                current_statement_begin__ = 114;
                stan::model::assign(t_last, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable t_last");
            }
            current_statement_begin__ = 118;
            for (int i = 1; i <= N_old; ++i) {
                current_statement_begin__ = 119;
                stan::model::assign(group_id, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(group_id_old, i, "group_id_old", 1), 
                            "assigning variable group_id");
                current_statement_begin__ = 120;
                stan::model::assign(subject_id, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(subject_id_old, i, "subject_id_old", 1), 
                            "assigning variable subject_id");
                current_statement_begin__ = 121;
                stan::model::assign(t_recruitment, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(t_old, i, "t_old", 1), 
                            "assigning variable t_recruitment");
                current_statement_begin__ = 122;
                stan::model::assign(t_last, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(group_id, i, "group_id", 1)), stan::model::nil_index_list()), 
                            stan::math::fmax(get_base1(t_last, get_base1(group_id, i, "group_id", 1), "t_last", 1), get_base1(t_recruitment, i, "t_recruitment", 1)), 
                            "assigning variable t_last");
            }
            current_statement_begin__ = 124;
            stan::math::assign(offset, N_old);
            current_statement_begin__ = 127;
            for (int i = 1; i <= N_new; ++i) {
                current_statement_begin__ = 128;
                stan::math::assign(idx, (i + offset));
                current_statement_begin__ = 129;
                stan::model::assign(group_id, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            get_base1(group_id_new, i, "group_id_new", 1), 
                            "assigning variable group_id");
                current_statement_begin__ = 130;
                stan::model::assign(subject_id, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            get_base1(subject_id_new, i, "subject_id_new", 1), 
                            "assigning variable subject_id");
                current_statement_begin__ = 131;
                stan::math::assign(max_wait, get_base1(maximal_recruitment_interval, get_base1(group_id, idx, "group_id", 1), "maximal_recruitment_interval", 1));
                current_statement_begin__ = 132;
                stan::model::assign(t_recruitment, 
                            stan::model::cons_list(stan::model::index_uni(idx), stan::model::nil_index_list()), 
                            (get_base1(t_last, get_base1(group_id, idx, "group_id", 1), "t_last", 1) + ttexponential_rng(get_base1(rate, get_base1(group_id, idx, "group_id", 1), "rate", 1), stan::math::fmax(0, (now - get_base1(t_last, get_base1(group_id, idx, "group_id", 1), "t_last", 1))), max_wait, base_rng__, pstream__)), 
                            "assigning variable t_recruitment");
                current_statement_begin__ = 133;
                stan::model::assign(t_last, 
                            stan::model::cons_list(stan::model::index_uni(get_base1(group_id, idx, "group_id", 1)), stan::model::nil_index_list()), 
                            stan::math::fmax(get_base1(t_last, get_base1(group_id, idx, "group_id", 1), "t_last", 1), get_base1(t_recruitment, idx, "t_recruitment", 1)), 
                            "assigning variable t_last");
            }
            // validate, write generated quantities
            current_statement_begin__ = 105;
            size_t group_id_i_0_max__ = N_total;
            for (size_t i_0__ = 0; i_0__ < group_id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "group_id[i_0__]", group_id[i_0__], 1);
            }
            size_t group_id_k_0_max__ = N_total;
            for (size_t k_0__ = 0; k_0__ < group_id_k_0_max__; ++k_0__) {
                vars__.push_back(group_id[k_0__]);
            }
            current_statement_begin__ = 106;
            size_t subject_id_i_0_max__ = N_total;
            for (size_t i_0__ = 0; i_0__ < subject_id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "subject_id[i_0__]", subject_id[i_0__], 1);
            }
            size_t subject_id_k_0_max__ = N_total;
            for (size_t k_0__ = 0; k_0__ < subject_id_k_0_max__; ++k_0__) {
                vars__.push_back(subject_id[k_0__]);
            }
            current_statement_begin__ = 107;
            size_t t_recruitment_i_0_max__ = N_total;
            for (size_t i_0__ = 0; i_0__ < t_recruitment_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "t_recruitment[i_0__]", t_recruitment[i_0__], 0);
            }
            size_t t_recruitment_k_0_max__ = N_total;
            for (size_t k_0__ = 0; k_0__ < t_recruitment_k_0_max__; ++k_0__) {
                vars__.push_back(t_recruitment[k_0__]);
            }
            current_statement_begin__ = 108;
            vars__.push_back(offset);
            current_statement_begin__ = 109;
            vars__.push_back(idx);
            current_statement_begin__ = 110;
            vars__.push_back(max_wait);
            current_statement_begin__ = 111;
            size_t t_last_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < t_last_k_0_max__; ++k_0__) {
                vars__.push_back(t_last[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_IndependentPoissonRecruitmentModel";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t log_monthly_rate_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < log_monthly_rate_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_monthly_rate" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t rate_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rate" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t group_id_k_0_max__ = N_total;
        for (size_t k_0__ = 0; k_0__ < group_id_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "group_id" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t subject_id_k_0_max__ = N_total;
        for (size_t k_0__ = 0; k_0__ < subject_id_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "subject_id" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t t_recruitment_k_0_max__ = N_total;
        for (size_t k_0__ = 0; k_0__ < t_recruitment_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_recruitment" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "idx";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "max_wait";
        param_names__.push_back(param_name_stream__.str());
        size_t t_last_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < t_last_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_last" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t log_monthly_rate_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < log_monthly_rate_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_monthly_rate" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t rate_k_0_max__ = M_groups;
            for (size_t k_0__ = 0; k_0__ < rate_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rate" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t group_id_k_0_max__ = N_total;
        for (size_t k_0__ = 0; k_0__ < group_id_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "group_id" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t subject_id_k_0_max__ = N_total;
        for (size_t k_0__ = 0; k_0__ < subject_id_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "subject_id" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t t_recruitment_k_0_max__ = N_total;
        for (size_t k_0__ = 0; k_0__ < t_recruitment_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_recruitment" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "offset";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "idx";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "max_wait";
        param_names__.push_back(param_name_stream__.str());
        size_t t_last_k_0_max__ = M_groups;
        for (size_t k_0__ = 0; k_0__ < t_last_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "t_last" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_IndependentPoissonRecruitmentModel_namespace::model_IndependentPoissonRecruitmentModel stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
