[{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contribution Guidelines","title":"Contribution Guidelines","text":"üôè Thank taking time contribute! input deeply valued, whether issue, pull request, even feedback, regardless size, content scope.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Contribution Guidelines","text":"üóÉ License üìú Issues üö© Pull requests üëó Style guide üèÜ Recognition model ‚ùì Questions","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Contribution Guidelines","text":"contributions covered project‚Äôs license.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contribution Guidelines","text":"use GitHub track issues, feature requests, bugs. submitting new issue, please check issue already reported. issue already exists, please upvote existing issue üëç. reporting bug, please try specific possible describing provide minimal reproducible example (possible). new feature requests, please elaborate context benefit feature users, developers, relevant personas.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":"proposing-changes-to-the-code","dir":"","previous_headings":"","what":"Proposing changes to the code","title":"Contribution Guidelines","text":"repository uses Github flow model collaboration. submit pull request: Create branch. Please see branch naming convention . don‚Äôt write access repository, please fork . Make changes. Make sure code: passes checks imposed GitHub Actions well documented well tested unit tests sufficiently covering changes introduced Create pull request (PR). pull request description, please link relevant issue (), provide detailed description change, include assumptions. Address review comments, (let reviewer know). Receive approval. Merge PR write access. Otherwise, reviewer merge PR behalf. Pat back. Congratulations! üéâ now official contributor project! grateful contribution.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":"style-guide","dir":"","previous_headings":"","what":"Style guide","title":"Contribution Guidelines","text":"repository follows standard tidyverse style guide uses lintr lint checks. Customized lint configurations available repository‚Äôs .lintr file.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":"updating-stan-models","dir":"","previous_headings":"","what":"Updating stan models","title":"Contribution Guidelines","text":"stan models contained inst/stan automatically updated avoid taking dependency rstantools package. modifying adding new models, run silence R/stanmodels.R via capture.output().","code":"rstantools::rstan_config()"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":"recognition-model","dir":"","previous_headings":"","what":"Recognition model","title":"Contribution Guidelines","text":"currently formal recognition model place. expect recognition certain kind contribution, make sure clarify package maintainer advance.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/CONTRIBUTING.html","id":"questions","dir":"","previous_headings":"","what":"Questions","title":"Contribution Guidelines","text":"questions regarding contribution guidelines, please contact package/repository maintainer.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/oncomsm.html","id":"specifying-the-model","dir":"Articles","previous_headings":"","what":"Specifying the model","title":"Multi-State Models for Oncology","text":"following code defined prior assumptions two-group trial visit-spacing 1.2 months, .e., 6 weeks. model assumptions can visualized sampling prior.","code":"mdl <- create_srp_model(   # names of the arms/groups   group_id = c(\"control\", \"intervention\"),   # per-group logodds of response|stable   logodds_mean = c(logodds(.25), logodds(.5)),   logodds_sd = c(.75, .75),   # m[i,j] is the median time to next event for group i and transition j   median_time_to_next_event = matrix(c(     3, 2, 6,     2, 8, 12   ), byrow = TRUE, nrow = 2, ncol = 3),   # fixed standard deviation of the prior for all median times   median_time_to_next_event_sd = matrix(     1,     byrow = TRUE, nrow = 2, ncol = 3   ),   # uniform prior over the shape parameter, difficult to identify,   # better keep it tight to avoid issues with the sampler   shape_min = matrix(     .75,     byrow = TRUE, nrow = 2, ncol = 3   ),   shape_max = matrix(     2,     byrow = TRUE, nrow = 2, ncol = 3   ),   # the visit interval   visit_spacing = c(1.2, 1.2) )  print(mdl) #> srp_model<control,intervention>"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/oncomsm.html","id":"prior-checks","dir":"Articles","previous_headings":"","what":"Prior checks","title":"Multi-State Models for Oncology","text":"First, plot cumulative distribution functions (CDF) time--next-event first 36 (months) CDF response probabilities per group. based sample drawn prior distribution model. can re-use parameter sample sampling prior-predictive distribution separating sampling plotting steps. Often, rate progression free survival (PFS) particular time point interest. quantity direct function model parameters. Since simplified model distinguish progression death, denote combined endpoint ‚Äúprogression‚Äù. \\[ \\begin{align} \\operatorname{PFS}(t) :&= \\operatorname{Pr}\\big[\\,\\text{progression } t\\,\\big] \\\\   &= 1 - \\operatorname{Pr}\\big[\\,\\text{progression } t\\,] \\\\   &= 1 - \\operatorname{Pr}\\big[\\,\\text{progression } t\\,|\\, \\text{response}\\,]\\cdot\\operatorname{Pr}\\big[\\,\\text{response}\\,] \\\\   &\\qquad- \\operatorname{Pr}\\big[\\,\\text{progression } t\\,|\\, \\text{response}\\,]\\cdot\\operatorname{Pr}\\big[\\,\\text{response}\\,] \\\\   &= 1 - p\\cdot\\int_0^t f_1(u) \\cdot F_2(t - u) \\operatorname{d}u - (1 - p)\\cdot F_3(t) \\ . \\end{align} \\] integral arises need reflect uncertainty state change ‚Äústable‚Äù ‚Äúresponse‚Äù way ‚Äúprogression‚Äù. parameter sample thus also induces sample PFS rate given time point curve PFS rate time corresponds survival function ‚Äúprogression death‚Äù event.","code":"smpl_prior <- sample_prior(mdl, warmup = 500, nsim = 2000, seed = 36L)  plot(mdl, dt = c(0, 36), sample = smpl_prior)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/oncomsm.html","id":"sampling-from-the-prior-predictive-distribution","dir":"Articles","previous_headings":"","what":"Sampling from the prior-predictive distribution","title":"Multi-State Models for Oncology","text":"Next, draw samples prior-predictive distribution model. sample 100 trials 30 individuals per arm. , can re-use sample prior sample already used plotting. can run quick checks sampled data, e.g., observed response rates. crude approximation median transition times can obtained midpoints censoring intervals. generated data can also visualized swimmer plots.","code":"tbl_prior_predictive <- sample_predictive(   mdl,   sample = smpl_prior,   n_per_group = c(30L, 30L),   nsim = 100,   seed = 3423423 ) tbl_prior_predictive %>%   filter(from == \"stable\") %>%   group_by(group_id) %>%   summarize(p_response = sum(to == \"response\") / n()) #> # A tibble: 2 √ó 2 #>   group_id     p_response #>   <chr>             <dbl> #> 1 control           0.250 #> 2 intervention      0.479 tbl_prior_predictive %>%   filter(from == \"stable\") %>%   group_by(group_id, from, to) %>%   summarize(t_jump_approx = median(t_min + t_max) / 2, .groups = \"drop\") #> # A tibble: 4 √ó 4 #>   group_id     from   to          t_jump_approx #>   <chr>        <chr>  <chr>               <dbl> #> 1 control      stable progression           1.8 #> 2 control      stable response              3   #> 3 intervention stable progression           7.8 #> 4 intervention stable response              1.8 plot_mstate(mdl, tbl_prior_predictive %>% filter(iter == 1))"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/oncomsm.html","id":"building-a-visit-data-set","dir":"Articles","previous_headings":"","what":"Building a visit data set","title":"Multi-State Models for Oncology","text":"Usually, data come form individual visits, yet form interval censored transitions. can mimic sake example converting one prior predictive samples visit data. Note conversion exact since mstate format contain information potential visits interval boundaries. Next, add recruitment times assuming overall recruitment rate 3 per month.","code":"tbl_visits <- tbl_prior_predictive %>%   filter(iter == 1) %>%   mstate_to_visits(mdl, .)  print(tbl_visits) #> # A tibble: 573 √ó 4 #>    subject_id group_id     t state       #>    <chr>      <chr>    <dbl> <chr>       #>  1 1          control    0   stable      #>  2 1          control    1.2 stable      #>  3 1          control    2.4 progression #>  4 10         control    0   stable      #>  5 10         control    1.2 progression #>  6 11         control    0   stable      #>  7 11         control    2.4 stable      #>  8 11         control    3.6 progression #>  9 12         control    0   stable      #> 10 12         control    2.4 stable      #> # ‚Ä¶ with 563 more rows recruitment_rate_overall <- 3 # sample from poisson process set.seed(31532) tbl_sot <- tbl_visits %>%   select(     subject_id,     group_id   ) %>%   distinct() %>%   arrange(runif(n())) %>% # permute groups   mutate(     # poisson recruitment process     t_sot = cumsum(rexp(n = n(), rate = recruitment_rate_overall))   )  # add to visit times tbl_visits <- tbl_visits %>%   left_join(tbl_sot, by = c(\"subject_id\", \"group_id\")) %>%   mutate(t = t + t_sot) # shift event times accordingly  # convert back to mstate format and plot tbl_visits %>%   visits_to_mstate(start_state = \"stable\", absorbing_states = \"progression\") %>%   plot_mstate(mdl, ., relative_to_sot = FALSE)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/oncomsm.html","id":"a-hypothetical-interim-analysis","dir":"Articles","previous_headings":"","what":"A hypothetical interim analysis","title":"Multi-State Models for Oncology","text":"now cut data 15 months first SoT, can imitate hypothetical interim analysis.  can check observed response rates. Careful, due different time--event biased. can now inference drawing sample posterior distribution.","code":"tbl_visits_interim <- tbl_visits %>%   filter(t <= 15)  # convert to mstate plot tbl_mstate_interim <- visits_to_mstate(   tbl_visits_interim,   start_state = \"stable\",   absorbing_states = \"progression\",   now = 15 ) plot_mstate(mdl, tbl_mstate_interim, relative_to_sot = FALSE, now = 15) # estimate of the response rates (biased due to missing!) tbl_mstate_interim %>%   filter(from == \"stable\", !is.na(to)) %>%   group_by(group_id) %>%   summarize(p_response = sum(to == \"response\") / n()) #> # A tibble: 2 √ó 2 #>   group_id     p_response #>   <chr>             <dbl> #> 1 control           0     #> 2 intervention      0.833 smpl_posterior <- sample_posterior(mdl, tbl_mstate_interim, seed = 76947)  plot(mdl, dt = c(0, 36), sample = smpl_posterior) # calculate posterior quantiles of response probability smpl_posterior %>%   parameter_sample_to_tibble(mdl, .) %>%   filter(parameter == \"p\") %>%   group_by(group_id) %>%   summarize(     p_posterior_mean = median(value),     q25 = quantile(value, probs = .25),     q75 = quantile(value, probs = .75)   ) #> # A tibble: 2 √ó 4 #>   group_id     p_posterior_mean    q25   q75 #>   <chr>                   <dbl>  <dbl> <dbl> #> 1 control                 0.118 0.0865 0.161 #> 2 intervention            0.654 0.566  0.731"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/oncomsm.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Multi-State Models for Oncology","text":"","code":"sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.0      dplyr_1.0.10       oncomsm_0.1.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] Rcpp_1.0.9           tidyr_1.2.1          prettyunits_1.1.1    #>  [4] ps_1.7.2             visNetwork_2.1.2     rprojroot_2.0.3      #>  [7] digest_0.6.30        utf8_1.2.2           R6_2.5.1             #> [10] backports_1.4.1      stats4_4.2.2         evaluate_0.17        #> [13] highr_0.9            pillar_1.8.1         rlang_1.0.6          #> [16] callr_3.7.3          jquerylib_0.1.4      checkmate_2.1.0      #> [19] rmarkdown_2.17       DiagrammeR_1.0.9     pkgdown_2.0.6        #> [22] labeling_0.4.2       textshaping_0.3.6    desc_1.4.2           #> [25] stringr_1.4.1        htmlwidgets_1.5.4    loo_2.5.1            #> [28] munsell_0.5.0        compiler_4.2.2       xfun_0.34            #> [31] rstan_2.21.7         pkgconfig_2.0.3      systemfonts_1.0.4    #> [34] pkgbuild_1.3.1       htmltools_0.5.3      tidyselect_1.2.0     #> [37] tibble_3.1.8         gridExtra_2.3        codetools_0.2-18     #> [40] matrixStats_0.62.0   fansi_1.0.3          crayon_1.5.2         #> [43] withr_2.5.0          grid_4.2.2           jsonlite_1.8.3       #> [46] gtable_0.3.1         lifecycle_1.0.3      magrittr_2.0.3       #> [49] StanHeaders_2.21.0-7 scales_1.2.1         RcppParallel_5.1.5   #> [52] cli_3.4.1            stringi_1.7.8        cachem_1.0.6         #> [55] farver_2.1.1         fs_1.5.2             bslib_0.4.1          #> [58] ellipsis_0.3.2       ragg_1.2.4           generics_0.1.3       #> [61] vctrs_0.5.0          RColorBrewer_1.1-3   tools_4.2.2          #> [64] glue_1.6.2           purrr_0.3.5          processx_3.8.0       #> [67] parallel_4.2.2       fastmap_1.1.0        yaml_2.3.6           #> [70] inline_0.3.19        colorspace_2.0-3     memoise_2.0.1        #> [73] knitr_1.40           patchwork_1.1.2      sass_0.4.2"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/web_only/application-to-probability-of-success.html","id":"decision-criteria-and-probability-of-success","dir":"Articles > Web_only","previous_headings":"","what":"Decision criteria and Probability of Success","title":"Application to Probability of Success","text":"Let \\(D_t \\\\mathbb{D}\\) observed (visit) data time point \\(t\\) start trial. Let \\(\\tau\\) stopping time trial, e.g.¬†time point \\(n\\) individuals recruited reached minimal follow-. final decision whether trial considered success can modeled function \\(\\phi: \\mathbb{D} \\\\{0,1\\}\\) \\[\\phi(D_\\tau)=1 :\\Leftrightarrow D_\\tau\\ \\text{considered success}\\ . \\] Let \\(\\theta\\) vector parameters generative model allows sample data \\(D_\\tau|\\theta\\). Probability Success can calculated expected value decision rule prior distribution \\(f(\\cdot)\\) parameter space: \\[ \\operatorname{PoS} = \\int \\phi(D_\\tau) \\cdot f(\\theta) \\operatorname{d}\\theta \\ . \\] practice integral can approximated sampling generative model calculating average success rate. data \\(D_t=d_t\\) observed \\(t\\leq\\tau\\), one can update Probability Success using Bayes Theorem \\[ \\operatorname{PoS}\\,|\\, (D_t=d_t \\ ) = \\int \\phi(D_\\tau\\,|\\,D_t=d_t) \\cdot f(\\theta\\,|\\,D_t=d_t) \\operatorname{d}\\theta \\ . \\] Examples decision rules quantile posterior distribution response rate certain relevance threshold, quantile posterior distribution PFS6 rate certain relevance threshold, quantile posterior distribution PFS certain threshold, combination . Consider situation trial including two different arms ‚Äú‚Äù ‚ÄúB‚Äù. Assume following prior Weibull SRP multi-state model three arms/groups given. One can now sample prior visualize prior assumptions.","code":"mdl <- create_srp_model(   group_id = c(\"A\", \"B\"),   logodds_mean = logodds(c(0.1, 0.9)),   logodds_sd = rep(3, 2L),   median_time_to_next_event = matrix(c(     2, 6, 24,     2, 6, 24   ), byrow = TRUE, nrow = 2, ncol = 3),   median_time_to_next_event_sd = matrix(3, byrow = TRUE, nrow = 2, ncol = 3),   visit_spacing = rep(1.2, 2L) ) smpl_prior <- sample_prior(mdl, seed = 6835L)  plot(mdl, dt = c(0, 36), sample = smpl_prior, n_grid = 25)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/web_only/application-to-probability-of-success.html","id":"a-composite-orr-and-pfs12-success-criterion","dir":"Articles > Web_only","previous_headings":"","what":"A composite ORR and PFS12 success criterion","title":"Application to Probability of Success","text":"Assume success defined combination sufficiently high response rate sufficiently high progression-free-survival rate 12 months: \\[\\phi(D_\\tau) := \\operatorname{Pr}\\big[\\,\\text{ORR} \\geq 0.3\\ \\&\\ \\text{PFS}_{t=12} \\geq 0.4 \\, | \\, D_\\tau\\,\\big] \\geq 0.75\\] decision criterion can implemented following function: example apply criterion sample prior predictive distribution given : Next, can create table multiple prior-predictive samples. Grouping iteration nesting data frames results data frame data frames, tbl_prior_predictive$data[[]] corresponds data -th resample. Applying decision criterion averaging iterations MCMC approximation expected Probability Success.","code":"is_success <- function(data, nsim = 250L) {   set.seed(3819308)   smpl <- sample_posterior(mdl, data = data, warmup = 150L, nsim = nsim)   tbl_pfs_orr <- bind_cols(       sample_pfs_rate(mdl, 12, smpl),       parameter_sample_to_tibble(mdl, smpl) %>%         filter(parameter == \"p\") %>%         transmute(orr = value)     )   res <- tbl_pfs_orr %>%     group_by(group_id) %>%     summarize(       success = mean(pfs >= 0.5 & orr >= 0.3) >= 0.75     )   return(res) } tbl_prior_predictive <- sample_predictive(     mdl,     n_per_group = rep(40L, 2),     sample = smpl_prior,     nsim = 1L,     seed = 34930L   )  is_success(tbl_prior_predictive) #> # A tibble: 2 √ó 2 #>   group_id success #>   <chr>    <lgl>   #> 1 A        FALSE   #> 2 B        FALSE tbl_prior_predictive <- sample_predictive(     mdl,     n_per_group = rep(40L, 2),     sample = smpl_prior,     nsim = 100L, # same, here, only for demonstration purposes     seed = 34930L   ) %>%   group_by(iter) %>%   tidyr::nest() %>%   ungroup() print(tbl_prior_predictive) #> # A tibble: 100 √ó 2 #>     iter data               #>    <int> <list>             #>  1     1 <tibble [105 √ó 7]> #>  2     2 <tibble [115 √ó 7]> #>  3     3 <tibble [100 √ó 7]> #>  4     4 <tibble [104 √ó 7]> #>  5     5 <tibble [153 √ó 7]> #>  6     6 <tibble [119 √ó 7]> #>  7     7 <tibble [142 √ó 7]> #>  8     8 <tibble [106 √ó 7]> #>  9     9 <tibble [120 √ó 7]> #> 10    10 <tibble [119 √ó 7]> #> # ‚Ä¶ with 90 more rows # compute results in parallel res <- foreach(i = seq_len(nrow(tbl_prior_predictive))) %dopar% {   is_success(tbl_prior_predictive$data[[i]]) } # bind results together and aggregate to probability of success tbl_pos <- bind_rows(res, .id = \"iter\") %>%   group_by(group_id) %>%   summarize(     PoS = mean(success),     se  = sd(success) / sqrt(n())   ) print(tbl_pos) #> # A tibble: 2 √ó 3 #>   group_id   PoS     se #>   <chr>    <dbl>  <dbl> #> 1 A         0.23 0.0423 #> 2 B         0.68 0.0469"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/web_only/application-to-probability-of-success.html","id":"probability-of-success-during-the-trial","dir":"Articles > Web_only","previous_headings":"","what":"Probability of Success During the Trial","title":"Application to Probability of Success","text":"Bayesian generative model allows calculating posterior distribution time point given data observed far. future course trial can sampled posterior predictive distribution. illustrate shift success probability time, single realization point parameter space sampled. probability success can calculated different time points show prior shifts. Next, snapshot sequence time points trial data can created. Interim analyses every 3 months starting 9 months first-patient-24 months considered. interim data set, remainder trial can imputed sampling form posterior-predictive distribution. Probability success average success rate posterior predictive sample. change PoS time shown errorbars corresponding standard error simulation.","code":"mdl_point <- create_srp_model(   group_id = c(\"A\", \"B\"),   logodds_mean = logodds(c(0.5, 0.3)), # chose conflicting ORR parameters   logodds_sd = rep(0.01, 2L), # almost constant prior = fixed parameter   median_time_to_next_event = matrix(c(      4, 8, 24,      4, 8, 24   ), byrow = TRUE, nrow = 2, ncol = 3),   median_time_to_next_event_sd = matrix(0.1, byrow = TRUE, nrow = 2, ncol = 3),   visit_spacing = c(1.2, 1.2) ) # sample single realization tbl_data <- generate_visit_data(     mdl_point,     n_per_group = c(40L, 40L),     recruitment_rate = c(40 / 24, 40 / 24) # recruit in 24 months   ) print(tbl_data) #> # A tibble: 1,663 √ó 4 #>    subject_id group_id       t state    #>    <chr>      <chr>      <dbl> <chr>    #>  1 1          A         0.0525 stable   #>  2 1          A         1.49   stable   #>  3 1          A         2.93   stable   #>  4 1          A         4.37   stable   #>  5 1          A         5.81   stable   #>  6 1          A         7.25   stable   #>  7 1          A         8.45   response #>  8 1          A         9.73   response #>  9 1          A        11.0    response #> 10 1          A        12.3    response #> # ‚Ä¶ with 1,653 more rows tbl_data_interims <- tibble(     t_interim = c(1, 3, 6, 9, 12, 18, 24, 60)   ) %>%   mutate(     data = purrr::map(t_interim, function(t_interim) {         filter(tbl_data, t <= t_interim) %>% # keep only visits before interim         visits_to_mstate(start_state = \"stable\", # convert to mstate format                          absorbing_states = \"progression\", now = t_interim)       })   ) # wrap the steps to calculate PoS into a function pos <- function(tbl, nsim = 50L) {   tbl_posterior_predictive <- impute_trial(       mdl, tbl, rep(40L, 2), rep(1, 2L), nsim = nsim) %>%     group_by(iter) %>%     tidyr::nest()   res <- foreach(i = seq_len(nsim)) %dopar% {     is_success(tbl_posterior_predictive$data[[i]])   }   tbl_pos <- bind_rows(res, .id = \"iter\") %>%     group_by(group_id) %>%     summarize(       PoS = mean(success),       se  = sd(success) / sqrt(n())     )   return(tbl_pos) } # apply it to every time point tbl_pos_over_time <- tbl_data_interims %>%   mutate(     pos = purrr::map(data, pos, nsim = 50L)   ) %>%   tidyr::unnest(pos) # plot ggplot(tbl_pos_over_time) +   aes(t_interim) +   geom_errorbar(aes(ymin = PoS - se, ymax = PoS + se, color = group_id),                 width = 1) +   geom_line(aes(y = PoS, color = group_id), alpha = 0.33) +   scale_y_continuous(breaks = seq(0, 1, by = 0.1), limits = c(0, 1))"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/articles/web_only/application-to-probability-of-success.html","id":"session-info","dir":"Articles > Web_only","previous_headings":"","what":"Session info","title":"Application to Probability of Success","text":"","code":"sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] doFuture_0.12.2    foreach_1.5.2      future_1.29.0      dplyr_1.0.10       #> [5] ggplot2_3.4.0      oncomsm_0.1.0.9000 #>  #> loaded via a namespace (and not attached): #>  [1] Rcpp_1.0.9           tidyr_1.2.1          listenv_0.8.0        #>  [4] prettyunits_1.1.1    ps_1.7.2             rprojroot_2.0.3      #>  [7] digest_0.6.30        utf8_1.2.2           parallelly_1.32.1    #> [10] R6_2.5.1             backports_1.4.1      stats4_4.2.2         #> [13] evaluate_0.17        highr_0.9            pillar_1.8.1         #> [16] rlang_1.0.6          uuid_1.1-0           callr_3.7.3          #> [19] jquerylib_0.1.4      checkmate_2.1.0      rmarkdown_2.17       #> [22] pkgdown_2.0.6        labeling_0.4.2       textshaping_0.3.6    #> [25] desc_1.4.2           stringr_1.4.1        loo_2.5.1            #> [28] munsell_0.5.0        compiler_4.2.2       xfun_0.34            #> [31] rstan_2.21.7         pkgconfig_2.0.3      systemfonts_1.0.4    #> [34] pkgbuild_1.3.1       globals_0.16.1       htmltools_0.5.3      #> [37] tidyselect_1.2.0     tibble_3.1.8         gridExtra_2.3        #> [40] codetools_0.2-18     matrixStats_0.62.0   fansi_1.0.3          #> [43] crayon_1.5.2         withr_2.5.0          grid_4.2.2           #> [46] jsonlite_1.8.3       gtable_0.3.1         lifecycle_1.0.3      #> [49] magrittr_2.0.3       StanHeaders_2.21.0-7 scales_1.2.1         #> [52] RcppParallel_5.1.5   cli_3.4.1            stringi_1.7.8        #> [55] cachem_1.0.6         farver_2.1.1         fs_1.5.2             #> [58] bslib_0.4.1          ellipsis_0.3.2       ragg_1.2.4           #> [61] generics_0.1.3       vctrs_0.5.0          iterators_1.0.14     #> [64] tools_4.2.2          glue_1.6.2           purrr_0.3.5          #> [67] processx_3.8.0       parallel_4.2.2       fastmap_1.1.0        #> [70] yaml_2.3.6           inline_0.3.19        colorspace_2.0-3     #> [73] memoise_2.0.1        knitr_1.40           patchwork_1.1.2      #> [76] sass_0.4.2"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Kunzmann. Author, maintainer. Karhtik Ananthakrishnan. Contributor. Boehringer Ingelheim Ltd.. Copyright holder, funder.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kunzmann K (2022). oncomsm: Bayesian Multi-State Models Early Oncology. https://boehringer-ingelheim.github.io/oncomsm/, https://github.com/Boehringer-Ingelheim/oncomsm.","code":"@Manual{,   title = {oncomsm: Bayesian Multi-State Models for Early Oncology},   author = {Kevin Kunzmann},   year = {2022},   note = {https://boehringer-ingelheim.github.io/oncomsm/, https://github.com/Boehringer-Ingelheim/oncomsm}, }"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/index.html","id":"bayesian-multi-state-models-for-early-oncology","dir":"","previous_headings":"","what":"Bayesian Multi-State Models for Early Oncology","title":"Bayesian Multi-State Models for Early Oncology","text":"R package oncomsm implements methods dynamically predict response progression individuals early oncology trials using parametric multi-state models Bayesian inference. allows dynamic computation ‚Äúprobability success‚Äù wide range success criteria. instance, bhmbasket R package can used define study success based Bayesian hierarchical models.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Multi-State Models for Early Oncology","text":"","code":"# install.packages(\"remotes\") remotes::install_github(\"https://github.com/Boehringer-Ingelheim/oncomsm\")"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Bayesian Multi-State Models for Early Oncology","text":"package documentation hosted .","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Bayesian Multi-State Models for Early Oncology","text":"See contributing guidelines.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/Model.html","id":null,"dir":"Reference","previous_headings":"","what":"An abstract multi-state model class ‚Äî Model","title":"An abstract multi-state model class ‚Äî Model","text":"abstract class defining standard set methods implemented multi-state model. Objects class 'Model' instantiated directly, objects respective sub-classes can .","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/Model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An abstract multi-state model class ‚Äî Model","text":"","code":"# S3 method for Model format(x, ...)  # S3 method for Model print(x, ...)  # S3 method for Model sample_prior(   model,   warmup = 500L,   nsim = 2000L,   seed = NULL,   rstan_output = TRUE,   pars = attr(model, \"parameter_names\"),   ... )  # S3 method for Model sample_posterior(   model,   data,   warmup = 500L,   nsim = 2000L,   seed = NULL,   rstan_output = TRUE,   pars = attr(model, \"parameter_names\"),   ... )  # S3 method for Model sample_predictive(   model,   n_per_group,   sample = NULL,   nsim = 100L,   nsim_parameters = 1000L,   warmup_parameters = 250,   seed = NULL,   ... )  # S3 method for Model impute_predictive(   model,   data,   sample = NULL,   nsim = 1000L,   nsim_parameters = 1000L,   warmup_parameters = 250L,   seed = NULL,   ... )  # S3 method for Model impute_trial(   model,   data,   n_per_group,   recruitment_rates,   now = NULL,   sample = NULL,   nsim = 250L,   nsim_parameters = 500L,   warmup_parameters = 250L,   seed = NULL,   ... )  # S3 method for Model parameter_sample_to_tibble(model, sample, ...)  # S3 method for Model plot_mstate(model, data, now, relative_to_sot, ...)  # S3 method for Model generate_visit_data(model, n_per_group, recruitment_rate, seed = NULL, ...)  # S3 method for Model sample_pfs_rate(   model,   t,   sample = NULL,   warmup = 500L,   nsim = 2000L,   seed = NULL,   ... )  # S3 method for Model mstate_to_visits(model, tbl_mstate, ...)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/Model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An abstract multi-state model class ‚Äî Model","text":"x Model print ... arguments passed method implementations model model class \"Model\" warmup integer, number warmup samples rstan sampler retaining samples; used tune hyperparameters MCMC algorithm. nsim number samples draw seed integer, fixed random seed; NULL fixed seed rstan_output logical, function returns raw rstan sample object set TRUE pars character vector parameter names sample; resorting model defaults NULL data (multi-state) data frame impute trajectories . n_per_group number individuals per group recruited. sample stanfit object containing samples. parameter samples represent parameter distribution predictive distribution averages. Technically, parameters resampled replacement sample match desired number imputations. nsim_parameters integer, number parameter samples warmup_parameters integer, number warmup samples rstan sampler retaining samples parameters. recruitment_rates per-group recruitment rates. now exact time point relative start trial relative_to_sot Boolean, timeline relative start trial start treatment individual recruitment_rate numeric vector monthly recruitment rates per group t vector time-points PFS rate computed tbl_mstate data table multi-state format. TODO: explain","code":""},{"path":[]},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/generate_visit_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Visit data from a multi-state model ‚Äî generate_visit_data","title":"Generate Visit data from a multi-state model ‚Äî generate_visit_data","text":"Generate Visit data multi-state model","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/generate_visit_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Visit data from a multi-state model ‚Äî generate_visit_data","text":"","code":"generate_visit_data(model, n_per_group, recruitment_rate, ...)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/generate_visit_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Visit data from a multi-state model ‚Äî generate_visit_data","text":"model model class \"Model\" n_per_group integer vector number individuals per group. recruitment_rate numeric vector monthly recruitment rates per group ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/impute_predictive.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute data from predictive distribution ‚Äî impute_predictive","title":"Impute data from predictive distribution ‚Äî impute_predictive","text":"parameter sample provided, sample posterior predictive","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/impute_predictive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute data from predictive distribution ‚Äî impute_predictive","text":"","code":"impute_predictive(   model,   data,   sample,   nsim,   nsim_parameters,   warmup_parameters,   seed,   ... )"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/impute_predictive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute data from predictive distribution ‚Äî impute_predictive","text":"model model class \"Model\" data (multi-state) data frame impute trajectories . sample stanfit object containing samples. parameter samples represent parameter distribution predictive distribution averages. Technically, parameters resampled replacement sample match desired number imputations. nsim number samples draw nsim_parameters integer, number parameter samples warmup_parameters integer, number warmup samples rstan sampler retaining samples parameters. seed integer, fixed random seed; NULL fixed seed ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/impute_predictive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute data from predictive distribution ‚Äî impute_predictive","text":"data frame imputed version input data.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/impute_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute data from predictive distribution ‚Äî impute_trial","title":"Impute data from predictive distribution ‚Äî impute_trial","text":"parameter sample provided, sample posterior predictive","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/impute_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute data from predictive distribution ‚Äî impute_trial","text":"","code":"impute_trial(   model,   data,   n_per_group,   recruitment_rates,   now,   sample,   nsim,   nsim_parameters,   warmup_parameters,   seed,   ... )"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/impute_trial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute data from predictive distribution ‚Äî impute_trial","text":"model model class \"Model\" data (multi-state) data frame impute trajectories . n_per_group number individuals per group recruited. recruitment_rates per-group recruitment rates. now exact time point relative start trial sample stanfit object containing samples. parameter samples represent parameter distribution predictive distribution averages. Technically, parameters resampled replacement sample match desired number imputations. nsim number samples draw nsim_parameters integer, number parameter samples warmup_parameters integer, number warmup samples rstan sampler retaining samples parameters. seed integer, fixed random seed; NULL fixed seed ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/impute_trial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute data from predictive distribution ‚Äî impute_trial","text":"data frame imputed version input data.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/logodds.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-odds function ‚Äî logodds","title":"Log-odds function ‚Äî logodds","text":"computed log odds probability.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/logodds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-odds function ‚Äî logodds","text":"","code":"logodds(p)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/logodds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-odds function ‚Äî logodds","text":"p numeric probabilities","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/logodds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-odds function ‚Äî logodds","text":"log(p/(1-p))","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/mstate_to_visits.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data from multi-state to visit format ‚Äî mstate_to_visits","title":"Convert data from multi-state to visit format ‚Äî mstate_to_visits","text":"still experimental since conversion 1:1. multi-state representation drops non-changing visits, hence exact visit data recovered form multi-state representation.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/mstate_to_visits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data from multi-state to visit format ‚Äî mstate_to_visits","text":"","code":"mstate_to_visits(model, tbl_mstate, ...)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/mstate_to_visits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data from multi-state to visit format ‚Äî mstate_to_visits","text":"model model class \"Model\" tbl_mstate data table multi-state format. TODO: explain ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/mstate_to_visits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data from multi-state to visit format ‚Äî mstate_to_visits","text":"data frame (tibble) visit format, line corresponds individual visits.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/mstate_to_visits.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert data from multi-state to visit format ‚Äî mstate_to_visits","text":"intermediate visits reconstructed using visit spacing information stored model.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/oncomsm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The oncomsm package. ‚Äî oncomsm-package","title":"The oncomsm package. ‚Äî oncomsm-package","text":"package implements methods dynamically predict response progression individuals early oncology trials using parametric multi-state models Bayesian inference. allows dynamic computation Probability Success wide range success criteria. inference implemented using stan.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/oncomsm-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The oncomsm package. ‚Äî oncomsm-package","text":"Stan Development Team (2021). RStan: R interface Stan. R package version 2.21.3. https://mc-stan.org","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/parameter_sample_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert stanfit sample to data table ‚Äî parameter_sample_to_tibble","title":"Convert stanfit sample to data table ‚Äî parameter_sample_to_tibble","text":"Convert stanfit sample data table","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/parameter_sample_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert stanfit sample to data table ‚Äî parameter_sample_to_tibble","text":"","code":"parameter_sample_to_tibble(model, sample, ...)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/parameter_sample_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert stanfit sample to data table ‚Äî parameter_sample_to_tibble","text":"model model class \"Model\" sample stanfit object samples respective model. ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/parameter_sample_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert stanfit sample to data table ‚Äî parameter_sample_to_tibble","text":"tibble sampled parameters long format","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/plot_mstate.html","id":null,"dir":"Reference","previous_headings":"","what":"Swimmer-like plot of multi-state data ‚Äî plot_mstate","title":"Swimmer-like plot of multi-state data ‚Äî plot_mstate","text":"Swimmer-like plot multi-state data","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/plot_mstate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swimmer-like plot of multi-state data ‚Äî plot_mstate","text":"","code":"plot_mstate(model, data, now, relative_to_sot, ...)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/plot_mstate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swimmer-like plot of multi-state data ‚Äî plot_mstate","text":"model model class \"Model\" data data table multi-state data now current time relative start trial (sot) relative_to_sot Boolean, timeline relative start trial start treatment individual ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_pfs_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from the progression-free-survival rate ‚Äî sample_pfs_rate","title":"Sample from the progression-free-survival rate ‚Äî sample_pfs_rate","text":"Progression-free-survival rate time t (PFS-t rate) function parameters given multi-state model. Hence prior posterior sample model gives rise sample corresponding PFS t rate.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_pfs_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from the progression-free-survival rate ‚Äî sample_pfs_rate","text":"","code":"sample_pfs_rate(model, t, sample, warmup, nsim, seed, ...)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_pfs_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from the progression-free-survival rate ‚Äî sample_pfs_rate","text":"model model class \"Model\" t vector time-points PFS rate computed sample stanfit object samples respective model. warmup integer, number warmup samples rstan sampler retaining samples; used tune hyperparameters MCMC algorithm. nsim number samples draw seed integer, fixed random seed; NULL fixed seed ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_pfs_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from the progression-free-survival rate ‚Äî sample_pfs_rate","text":"data frame samples PFS rates time points vector t.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_posterior.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample model posterior parameters ‚Äî sample_posterior","title":"Sample model posterior parameters ‚Äî sample_posterior","text":"Posterior sample model parameters conditional data set.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_posterior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample model posterior parameters ‚Äî sample_posterior","text":"","code":"sample_posterior(model, data, warmup, nsim, seed, rstan_output, pars, ...)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_posterior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample model posterior parameters ‚Äî sample_posterior","text":"model model class \"Model\" data data frame variables \"subject_id\", \"group_id\", \"t_recruitment\", \"dt1\" \"dt2\" dt1 minimal dt2 maximal time event question. Inf, individual never experience event. dt1 < Inf dt2 == Inf individual still risk. \"t_recruitment\", \"dt1\" \"dt2\" can also missing individual yet recruited. warmup integer, number warmup samples rstan sampler retaining samples; used tune hyperparameters MCMC algorithm. nsim number samples draw seed integer, fixed random seed; NULL fixed seed rstan_output logical, function returns raw rstan sample object set TRUE pars character vector parameter names sample; resorting model defaults NULL ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_posterior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample model posterior parameters ‚Äî sample_posterior","text":"tibble columns iter (integer), parameter (character), group_id (character), value (numeric) parameter samples long format (rstan_output == TRUE) rstanfit object.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_predictive.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data from predictive distribution of a model ‚Äî sample_predictive","title":"Sample data from predictive distribution of a model ‚Äî sample_predictive","text":"Sample data predictive distribution model","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_predictive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data from predictive distribution of a model ‚Äî sample_predictive","text":"","code":"sample_predictive(   model,   n_per_group,   sample,   nsim,   nsim_parameters,   warmup_parameters,   seed,   ... )"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_predictive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample data from predictive distribution of a model ‚Äî sample_predictive","text":"model model class \"Model\" n_per_group integer vector number individuals per group. sample stanfit object samples respective model. nsim number samples draw nsim_parameters integer, number parameter samples warmup_parameters integer, number warmup samples rstan sampler retaining samples parameters. seed integer, fixed random seed; NULL fixed seed ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_predictive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample data from predictive distribution of a model ‚Äî sample_predictive","text":"TODO:","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_prior.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample model prior parameters ‚Äî sample_prior","title":"Sample model prior parameters ‚Äî sample_prior","text":"Sample model parameters model prior distribution.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_prior.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample model prior parameters ‚Äî sample_prior","text":"","code":"sample_prior(model, warmup, nsim, seed, rstan_output, pars, ...)"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_prior.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample model prior parameters ‚Äî sample_prior","text":"model model class \"Model\" warmup integer, number warmup samples rstan sampler retaining samples; used tune hyperparameters MCMC algorithm. nsim number samples draw seed integer, fixed random seed; NULL fixed seed rstan_output logical, function returns raw rstan sample object set TRUE pars character vector parameter names sample; resorting model defaults NULL ... arguments passed method implementations","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/sample_prior.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample model prior parameters ‚Äî sample_prior","text":"tibble columns iter (integer), parameter (character), group_id (character), value (numeric) parameter samples long format (rstan_output == TRUE) rstanfit object.","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/srp_model.html","id":null,"dir":"Reference","previous_headings":"","what":"A Stable-Response-Progression Model ‚Äî mstate_to_visits.srp_model","title":"A Stable-Response-Progression Model ‚Äî mstate_to_visits.srp_model","text":"Create new instance SRP model","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/srp_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Stable-Response-Progression Model ‚Äî mstate_to_visits.srp_model","text":"","code":"# S3 method for srp_model mstate_to_visits(model, tbl_mstate, ...)  create_srp_model(   group_id,   logodds_mean,   logodds_sd,   median_time_to_next_event_mean,   median_time_to_next_event_sd,   visit_spacing,   logodds_min = rep(logodds(0.001), length(group_id)),   logodds_max = rep(logodds(0.999), length(group_id)),   shape_min = matrix(0.99, nrow = length(group_id), ncol = 3),   shape_max = matrix(1.01, nrow = length(group_id), ncol = 3) )  # S3 method for srp_model format(x, ...)  # S3 method for srp_model plot_mstate(   model,   data,   now = max(tbl_mstate$t_max),   relative_to_sot = TRUE,   ... )"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/srp_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A Stable-Response-Progression Model ‚Äî mstate_to_visits.srp_model","text":"model model class \"Model\" tbl_mstate data table multi-state format. TODO: explain ... arguments passed method implementations group_id character vector group ids, used check compatibility data later logodds_mean vector means (truncated) normal priors log-odds response probability logodds_sd vector standard deviations (truncated) normal priors log-odds response probability median_time_to_next_event_mean matrix means (truncated) normal priors median time next event Weibull transition probabilities, (,j)-th entry -th group median time next event transition j (1=stable-response, 2=stable-progression, 3=response-progression) median_time_to_next_event_sd matrix standard deviations (truncated) normal priors median time next event Weibull transition probabilities, (,j)-th entry -th group median time next event transition j (1=stable-response, 2=stable-progression, 3=response-progression) visit_spacing vector time differences visits per group logodds_min lower boundary log-odds per group logodds_max upper boundary log-odds per group shape_min matrix lower boundaries uniform prior Weibull distribution per group/transition shape_max matrix upper boundaries uniform prior Weibull distribution per group/transition x SRP model format data data table multi-state data now current time relative start trial (sot) relative_to_sot Boolean, timeline relative start trial start treatment individual","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/srp_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A Stable-Response-Progression Model ‚Äî mstate_to_visits.srp_model","text":"TODO","code":""},{"path":[]},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/visits_to_mstate.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert longitudinal visit data to time-to-event data ‚Äî visits_to_mstate","title":"Convert longitudinal visit data to time-to-event data ‚Äî visits_to_mstate","text":"Convert longitudinal visit data time--event data","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/visits_to_mstate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert longitudinal visit data to time-to-event data ‚Äî visits_to_mstate","text":"","code":"visits_to_mstate(   tbl_visits,   start_state,   absorbing_states,   now = max(tbl_visits$t),   eof_indicator = \"EOF\" )"},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/visits_to_mstate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert longitudinal visit data to time-to-event data ‚Äî visits_to_mstate","text":"tbl_visits visit data long format start_state staring state absorbing_states character vector absorbing states now time point since start trial (might later last recorded visit) eof_indicator state name indicating (exactly observed) eond follow .","code":""},{"path":"https://boehringer-ingelheim.github.io/oncomsm/reference/visits_to_mstate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert longitudinal visit data to time-to-event data ‚Äî visits_to_mstate","text":"data frame","code":""}]
